
https://pypi.org/project/pip/
下载：pip  setuptools  django uwsgi

1 安装 python3

	yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc make

	下载好了之后在文件所在目录解压
	tar -xvf Python-3.7.0.tgz
	配置编译
	进入到解压的python的目录里面，使用`Python3.7.0/configure`文件进行配置
	cd Python-3.7.0
	配置编译的的路径
	./configure --prefix=/opt/python/python-3.7.0
	安装依赖项
	安装Python 3.7所需的依赖:
	yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc make
	下载Python
	在官网下载所需版本，这里用的是3.7.0版本
	wget https://www.python.org/ftp/3.7.0/Python-3.7.0.tgz
	安装Python
	通过解压，配置编译，编译安装等步骤完成
	解压
	下载好了之后在文件所在目录解压
	tar -xvf Python-3.7.0.tgz
	配置编译
	进入到解压的python的目录里面，使用`Python3.7.0/configure`文件进行配置
	cd Python-3.7.0
	配置编译的的路径
	./configure --prefix=/usr/local/python-3.7.4

	优化选项（可选）：
	执行完上一步后会提示执行以下的代码对Python解释器进行优化，执行该代码后，会编译安装到 /usr/local/bin/ 下，且不用添加软连接或环境变量
	./configure --enable-optimizations
	编译和安装
	make && make install
	添加软连接
	添加软链或者添加到环境变量，直接输入python3就可以使用了，下边是添加软连接：
	ln -s /usr/local/python-3.7.4/bin/python3 /usr/bin/python3

	vi /etc/profile
	export PATH=$PATH:/usr/local/python-3.7.4/bin

	source  /etc/profile

	安装python3时同时安装了pip　和　setuptools

	可以更新升级相关部件

	
	pip3  install  --upgrade setuptools
	pip3  install --upgrade  pip
	python3 -m django –version  -查看版本

==========================================================================================




2、安装pip前需要前置安装setuptools  (编译安装）

	命令如下：

	wget --no-check-certificate  https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26
	 
	tar -zxvf setuptools-19.6.tar.gz
	 
	cd setuptools-19.6
	 
	python3 setup.py build
	 
	python3 setup.py install


============================================================

3.  安装django

pip3  install   django

python3 manage.py migrate

djan

--------------------------------------------------------------------
4.  安装sqlite  

	wget https://www.sqlite.org/2019/sqlite-autoconf-3280000.tar.gz
	tar -zxvf sqlite-autoconf-3280000.tar.gz
	cd sqlite-autoconf-3280000

	./configure --prefix=/usr/local
	make && make install
	find /usr/ -name sqlite3

	删除不必要的文件
	rm -rf sqlite-autoconf-3280000*


	mv /usr/bin/sqlite3  /usr/bin/sqlite3_old
	ln -s /usr/local/bin/sqlite3   /usr/bin/sqlite3

	vim ~/.bashrc
	export LD_LIBRARY_PATH="/usr/local/lib"
	source ~/.bashrc

	测试 sqlite：
	python3
	import sqlite3
	sqlite3.sqlite_version  显示版本

---------------------------------------------------------------------
5. 创建Django项目：
django-admin.py startproject 项目名(mysite)
创建项目中的static目录：
cd mysite
mkdir static

更改文件
setting.py 
ALLOWED_HOSTS = ['*']


python3 manage.py migrate


启动Django项目
python3 manage.py runserver 0.0.0.0:8000
选择一个浏览器输入：http://115.159.214.215:8000/
注意：IP地址换成自己的主机IP
python3 mange.py createsuperuser  -产生admin用户

--------------------------------------------------------------------------
6. 安装 uwsgi

pip3  install  uwsgi

uwsgi --http  0.0.0.0:8080 --chdir /root/project/ --wsgi-file project/wsgi.py --master --processes 4 --threads 2 --stat
s 0.0.0.0:9191

# test.py
def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    return [b"Hello World"]

测试：
uwsgi –http :8001 –wsgi-file test.py
	添加并发和监控
	默认情况下，uWSGI 启动一个单一的进程和一个单一的线程。
	你可以用 --processes 选项添加更多的进程，或者使用 --threads 选项添加更多的线程 ，也可以两者同时使用。
	uwsgi --http :9090 --wsgi-file foobar.py --master --processes 4 --threads 2
	以上命令将会生成 4 个进程, 每个进程有 2 个线程。
	如果你要执行监控任务，可以使用 stats 子系统，监控的数据格式是 JSON：
	uwsgi --http :9090 --wsgi-file foobar.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191
	我们可以安装 uwsgitop（类似 Linux top 命令） 来查看监控数据：
	pip install uwsgitop
	结合 Web 服务器使用
	我们可以将 uWSGI 和 Nginx Web 服务器结合使用，实现更高的并发性能。
	一个常用的nginx配置如下：

	location / {
		include uwsgi_params;
		uwsgi_pass 127.0.0.1:3031;
	}

	现在，我们可以生成 uWSGI 来本地使用 uwsgi 协议：
	uwsgi --socket 127.0.0.1:3031 --wsgi-file foobar.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191
	如果你的 Web 服务器使用 HTTP，那么你必须告诉 uWSGI 本地使用 http 协议 (这与会自己生成一个代理的–http不同):
	uwsgi --http-socket 127.0.0.1:3031 --wsgi-file foobar.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191

ini 配置：
	uwsgi 配置
	uwsgi支持ini、xml等多种配置方式，本文以 ini 为例， 在/etc/目录下新建uwsgi8001.ini，添加如下配置：

	[uwsgi]
	#pythonpath = /usr/local/lib/python2.7/site-packages //因为python重新安装过的，所以目录要指定到这个
	pythonpath = /usr/local/lib/python3.6/site-packages
	socket = 127.0.0.1:8001
	master = true         //主进程
	vhost = true          //多站模式
	no-site = true        //多站模式时不设置入口模块和文件
	workers = 2           //子进程数
	reload-mercy = 10     
	vacuum = true         //退出、重启时清理文件
	max-requests = 1000   
	limit-as = 512
	buffer-size = 30000
	pidfile = /var/run/uwsgi8001.pid    //pid文件，用于下面的脚本启动、停止该进程
	daemonize = /website/uwsgi8001.log  //因为python重新安装过的，所以目录要指定到这个

	另外要新建一个/website目录，否则也会报错！！

uwsgi --ini /etc/uwsgi8001.ini  测试

----------------------------------------------------------------------------------------------


7.  安装nginx
 yum  install wget -y
 wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
 yum  install nginx -y
 
测试：  systemctl  start  nginx
  访问： ip  可看到nginx 欢迎界面。
  
  编译安装：
  tar zxvf nginx-1.6.2.tar.gz
  ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module  --with-http_gzip_static_module 
  make  && make  install
  
  /usr/local/webserver/nginx/sbin/nginx -v   查看版本
  # /usr/local/webserver/nginx/sbin/nginx -t  检查配置文件nginx.conf的正确性命令
  配置模版：
   /usr/sbin/groupadd www   建组
   /usr/sbin/useradd -g www www  建用户
  cat /usr/local/webserver/nginx/conf/nginx.conf
 			user www www;
			worker_processes 2; #设置值和CPU核心数一致
			error_log /usr/local/webserver/nginx/logs/nginx_error.log crit; #日志位置和日志级别
			pid /usr/local/webserver/nginx/nginx.pid;
			#Specifies the value for maximum file descriptors that can be opened by this process.
			worker_rlimit_nofile 65535;
			events
			{
			  use epoll;
			  worker_connections 65535;
			}
			http
			{
			  include mime.types;
			  default_type application/octet-stream;
			  log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
			               '$status $body_bytes_sent "$http_referer" '
			               '"$http_user_agent" $http_x_forwarded_for';
			  
			#charset gb2312;
			     
			  server_names_hash_bucket_size 128;
			  client_header_buffer_size 32k;
			  large_client_header_buffers 4 32k;
			  client_max_body_size 8m;
			     
			  sendfile on;
			  tcp_nopush on;
			  keepalive_timeout 60;
			  tcp_nodelay on;
			  fastcgi_connect_timeout 300;
			  fastcgi_send_timeout 300;
			  fastcgi_read_timeout 300;
			  fastcgi_buffer_size 64k;
			  fastcgi_buffers 4 64k;
			  fastcgi_busy_buffers_size 128k;
			  fastcgi_temp_file_write_size 128k;
			  gzip on; 
			  gzip_min_length 1k;
			  gzip_buffers 4 16k;
			  gzip_http_version 1.0;
			  gzip_comp_level 2;
			  gzip_types text/plain application/x-javascript text/css application/xml;
			  gzip_vary on;
			 
			  #limit_zone crawler $binary_remote_addr 10m;
			 #下面是server虚拟主机的配置
			 server
			  {
			    listen 80;#监听端口
			    server_name localhost;#域名
			    index index.html index.htm index.php;
			    root /usr/local/webserver/nginx/html;#站点目录
			      location ~ .*\.(php|php5)?$
			    {
			      #fastcgi_pass unix:/tmp/php-cgi.sock;
			      fastcgi_pass 127.0.0.1:9000;
			      fastcgi_index index.php;
			      include fastcgi.conf;
			    }
			    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$
			    {
			      expires 30d;
			  # access_log off;
			    }
			    location ~ .*\.(js|css)?$
			    {
			      expires 15d;
			   # access_log off;
			    }
			    access_log off;
			  }
			 
			}
			
静态资源没有配置，导致admin界面进去之后都是丢失了css样式的
	解决步骤：
	在/website目录下新建目录static
	修改项目目录下settings.py，增加下面这行：
	STATIC_ROOT = '/website/static/'
	再在nginx里给这个目录取一个别名
	location /static {
		alias /website/static/;
	}
	意思就是外部访问我的 域名/static  时候就可以访问到/website/static这个目录
	使用python manage.py collectstatic，将项目需要的静态资源搜集到指定的STATIC_ROOT对应的目录下。也即是这个nginx刚刚取了别名的目录/website/static/。
	
	python manage.py collectstatic
	
			
=========================================================================================================================== 
8.    Nginx 配置 支持 uwsgi

找到nginx的安装目录（如：/usr/local/nginx/），打开conf/nginx.conf文件，修改server配置：
		server {
				listen       80;
				server_name  localhost;
				
				location / {            
					include  uwsgi_params;
					uwsgi_pass  127.0.0.1:9090;              //必须和uwsgi中的设置一致
					uwsgi_param UWSGI_SCRIPT demosite.wsgi;  //入口文件，即wsgi.py相对于项目根目录的位置，“.”相当于一层目录
					uwsgi_param UWSGI_CHDIR /root/Penn/demosite/;       //项目根目录！！！
					index  index.html index.htm;
					client_max_body_size 35m;
				}
			}


9. 部署 uwsgi+ Django
	Django 是最常使用的 Python web 框架，假设 Django 项目位于 /home/foobar/myproject:

	uwsgi --socket 127.0.0.1:3031 --chdir /home/foobar/myproject/ --wsgi-file myproject/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191

	--chdir 用于指定项目路径。

	我们可以把以上的命令弄成一个 yourfile.ini 配置文件:

	[uwsgi]
	socket = 127.0.0.1:3031
	chdir = /home/foobar/myproject/
	wsgi-file = myproject/wsgi.py
	processes = 4
	threads = 2
	stats = 127.0.0.1:9191
	接下来你只需要执行以下命令即可：
	uwsgi yourfile.ini
	
				
    ningx  +django 静态资源没有配置，导致admin界面进去之后都是丢失了css样式的
解决步骤：
	在/website目录下新建目录static
	修改项目目录下settings.py，增加下面这行：
	STATIC_ROOT = '/website/static/'
	再在nginx里给这个目录取一个别名
	location /static {
		alias /website/static/;
	}
	意思就是外部访问我的 域名/static  时候就可以访问到/website/static这个目录
	使用python manage.py collectstatic，将项目需要的静态资源搜集到指定的STATIC_ROOT对应的目录下。也即是这个nginx刚刚取了别名的目录/website/static/。

	
	在settings.py中设置一下media的路径
    STATIC_ROOT = '/root/project/static/'
    MEDIA_ROOT = '/website/media'
	python manage.py collectstatic

	
	
10. 部署 uwsgi+Flask
	Flask 是一个流行的 Python web 框架。

	创建文件 myflaskapp.py ，代码如下：

	from flask import Flask

	app = Flask(__name__)

	@app.route('/')
	def index():
		return "<span style='color:red'>I am app 1</span>"
	执行以下命令：

	uwsgi --socket 127.0.0.1:3031 --wsgi-file myflaskapp.py --callable app --processes 4 --threads 2 --stats 127.0.0.1:9191

11  文件上传解决
图片的上传

需要在admin的models下有个能上传图片的表，在models.py中定义表结构如下

class Shop(models.Model):
    name = models.CharField(max_length=200)
    lat = models.FloatField(default=0)
    lng = models.FloatField(default=0)
    addr = models.CharField(max_length=500)
    phone = models.CharField(max_length=20)
    imgUrl = models.ImageField(u'图片',upload_to='uploadImages')
    status = models.IntegerField(default=0)
    notes = models.CharField(max_length=500)
    addDate = models.DateTimeField(u'添加时间', auto_now_add=True, editable=True)
    updateTime = models.DateTimeField(u'更新时间', auto_now=True, null=True)
在settings.py中设置一下media的路径

MEDIA_ROOT = '/website/media'
MEDIA_URL = '/media/'
在admin.py下新加一条注册模型的语句

admin.site.register([Test,Shop])
 

 

 

同时在website目录下新建media目录

在nginx的配置文件中同样的新建一个media对应的别名

 

location /media{
    alias /website/media/;
}
在项目根目录下执行以下指令，来重新生成数据库

python3 manage.py makemigrations WxModel  # 让 Django 知道我们在我们的模型有一些变更
python3 manage.py migrate WxModel   # 创建表结构
另外还缺少一个Pillow的库，是要使用ImageField类型的字段需要的一个图形库，使用pip安装

pip3 install Pillow
 

重启nginx和uwsgi后成功
————————————————
版权声明：本文为CSDN博主「wangpeng2011314」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/wangpeng2011314/article/details/80993178
=================================================================================================

yum  install wget  ntpdate -y

wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
yum  install  epel-release -y 
sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo
yum  makecache

timedatectl 
timedatectl list-timezones
timedatectl set-timezone Asia/Shanghai
ntpdate  time.nist.gov
ntpdate asia.pool.ntp.org
clock - 系统时钟
hwclock - 硬件时钟
hwclock -w  -- sys to  hwclock

yum  installgroup "fonts"
localectl 
lcoalectl set-locale LANG=zh_CN.utf8
locale -a |grep "zh_CN"
vim  /etc/profile
	export  LANG=zh_CN.UTF-8
source /etc/profile
hostnamectl  set-hostname  hostname

mariadb：
yum install mariadb-server -y
mkdir -p /data/mysql
chown -R  mysql:mysql /data/mysql
mysql_install_db  --datadir=/data/mysql
systemctl enable mariadb
systemctl start mariadb
mysqladmin -u root password pass  # 设置msyql  root 密码
mysql -u root -p   #登陆mysql
grant all privileges on *.* to root@'%' identified by 'pass';
flush privileges;
\q


===============  配置文件 的使用 =============================
1. JSON：                       #json 配置读取
config.json
{
    "db":{
        "host": "192.168.110.39",
        "user": "root",
        "password": "pass",
        "port": 3306,
        "database": "db1"
    }
}

config_json_load.py
import json
import pymysql
from pprint import pprint
with  open ('./config.json') as j:
    cfg = json.load(j)['db']
con= pymysql.connect(**cfg)
cursor=con.cursor()
sqltxt = 'select * from tb1'
cursor.execute(sqltxt)
print(cursor.fetchall())
cursor.close()
con.close()
print(sqltxt)

2. yaml                             #yaml 配置文件读取
config_yaml.yaml
mysql:
  host: "192.168.110.39"
  port: 3306
  user: "root"
  password: "pass"
  database: "db1"


  parameter:
    pool_size: 5
    charset: "utf8"

  fields:
    pandas_cols: 
      - id
      - name
      - age
      - date
	
config_yaml_load.py
import os
import yaml
import pymysql
from pprint import pprint
with open(os.path.expanduser('./config.yaml'),'r') as config:
    cfg = yaml.safe_load(config)
pprint(cfg)

3. ini                          #ini  配置读取
config.ini
[db]
host     = 192.168.110.39
user     = root
password = pass
port     = 3306
database = db1

config_ini_load.py
import os
import yaml
import pymysql
from pprint import pprint
with open(os.path.expanduser('./config.yaml'),'r') as config:
    cfg = yaml.safe_load(config)
pprint(cfg)

4. toml                          #toml配置读取
config.toml
[mysql]
host     = "192.168.110.39"
user     = "root"
port     = 3306
database = "db1"

[mysql.parameters]
pool_size = 5
charset   = "utf8"

[mysql.fields]
pandas_cols = [ "id", "name", "age", "date"]

config_toml_load.py                    #
import pymysql
import toml,os
from pprint import pprint
# cfg = toml.load(os.path.expanduser('./configtest.toml'))
cfg1 = toml.load(os.path.expanduser('./config.toml'))
cfg1 = toml.load(('./configtest.toml'))
pprint(cfg)
pprint(cfg1)
con= pymysql.connect(**cfg['mysql'])
cursor=con.cursor()
sqltxt = 'select * from tb1'
cursor.execute(sqltxt)
print(cursor.fetchall())
cursor.close()
con.close()
print(sqltxt)


零基础Python手把手学编程课程2020
https://www.bilibili.com/video/BV1Fg4y1z7eP?p=37&vd_source=7c1f1c685bdbe61dee8088e7b1a39807


=====================  数据库操作 ==========
#  连接数据库，  2  拿到游标  3  操作数据库  4 关闭游标  5 关闭数据库。 

import  sqlite3
conn= sqlite3.connect('test1.db')
cursor=conn.cursor()
try:

    # sql='create table user(id int(11) primary key, name varchar(20))'
    # sql ="insert into user(id,name) values(4,'王4')"
    # sql ="select  * from user"
    sql="update user set name='赵明' where id = 7"
    cursor.execute(sql)
    # sql="delete from  user  where id = 1"
    # cursor.execute(sql)

    sql="select * from user"
    cursor.execute(sql)
    result=cursor.fetchall()
    # print(result)
    for r  in result:
        print("我是%d号， 我的名字%s" % r)
    conn.commit()
except  Exception as e:
    conn.rollback()
finally:
    cursor.close()
    conn.close()

+++++++   mongodb  +++++
import  pymongo
import re


pymongo_client = pymongo.MongoClient("mongodb://192.168.110.38:27017")
pymongo_db= pymongo_client["imocc"]
pymongo_collection = pymongo_db['pymongo_test']

# data ={
#     "name": "wal",
#     "flag":  1,
#     "url": "www.sina.com"
# }
# pymongo_collection.insert_one(data)

# mylist =[
#     {"name": "aa","flag": "100","url":"www.163.com"},
#     {"name": "bb", "flag": "101","url":"www.ifeng.com"},
#     {"name": "cc", "flag":102,"url":"www.qq.com"}
# ]
# pymongo_collection.insert_many(mylist)
#所有数据 2#是过滤
result= pymongo_collection.find({},{"_id":0,"name":1,"flag":1})
for item in result:
    print(item)
#只查询一条
# find_one= pymongo_collection.find_one()
# print(find_one)

# pymongo_collection.delete_one({"url":"www.sina.com"})

#条件过滤
# result= pymongo_collection.find({"flag":{"$gt":99}},{"_id":0})
#正则表达式
result= pymongo_collection.find({"name":{"$regex":"^a"}},{"_id":0,"name":1})
for item in result:
    print(item)

#数据更新：

# pymongo_collection.update_one({"name":{"$regex":"^a"}},{"$set":{"name":"baidu"}})

# pymongo_collection.update_many({},{"$set":{"flag":1000}})

++++++++  mysql  +++++
#  连接数据库，  2  拿到游标  3  操作数据库  4 关闭游标  5 关闭数据库。 

import  pymysql
conn= pymysql.connect(host='192.168.110.39',user='root',password='pass',database='testdb')
cursor=conn.cursor()
aa=(20,"网络")

sql='insert into user(id,name) values(%s,%s)'
print(sql)

cursor.execute(sql,aa)

conn.commit()

cursor.close()
conn.close()




======================PYTHON:   迭代器-生成器-装饰器=========================================
PYTHON:   迭代器-生成器-装饰器

# #迭代器
from ast import arg
from collections.abc import Iterable
from xml.dom.expatbuilder import InternalSubsetExtractor

from numpy import iterable

mylist=[1,2,3,4,5]
for i in mylist:
    print(i)

#Iterable     Iter
#能够被迭代的 : 序列，  list tuple  string  set dict bytes

print(isinstance(mylist , Iterable))
print(isinstance('string' , Iterable))
print(isinstance(123 , Iterable))

mylsit=[1,2,3,4,5]
it=iter(mylist)
print(next(it))
print(next(it))
print(next(it))

#生成器  ()  generator
#边迭代， 边输出
gen=(x for x in range(1,4000000000))
print(isinstance(gen,Iterable))
print(next(gen))
print(next(gen))
print(next(gen))
#斐波那契数列
def fib(n):
    a , b = 0,1
    count=0
    res=[]
    while True:
        if count> n :
            break
        res.append(a+b)
        a,b = b, a+b
        count +=1
    return res
print(fib(10))


def fib(n):
    a,b=0,1
    count=0
    while True:
        if count > n:
            break
        yield a +b    
        a ,b =b , a+b
        count +=1

gen=fib(10)
for i in gen:
    print(i)

gen=fib(10000000)
for i in gen:
    if i> 1000:
        break
    print(i)


#装饰器
def check(fun):
    def wapper(*args,**kwargs):
        print('this is check')
        fun(*args,**kwargs)
    return wapper

def check1(fun):
    def wapper():
      fun()
      print('this is check11')
    return wapper

# @check1
@check
def  fun1(x):
    print('this is fun1',x)
@check
def  fun2(x,y,**kwargs):
    print('this is fun2',x,y)
    print(kwargs)
@check1
def  fun3():
    print('this si print3')

a='ooooooooooo'
fun1(a)
fun2('aa','bb',a=1,b=2,c=3)
fun3()



========================== python  列表推导式======================
res=[]
for i in range(1,11):
    if  i % 2 ==0 :
        res.append(i**2)
print(res)

# res=[x ** 2 for  x in range(1,11)]
res=[x ** 2 for  x in range(1,11) if x % 2 ==0]
print(res)

res=[x for x in "python"]
res=[x + y for x in "python" for y in '123']
print(res)


res =tuple(x **2  for x in range(1,11) if i %2 ==0)
print(res)

#dict
dic={x:x**2 for x in range(1,11)}
print(dic)
#set

ss={x for x in range(1,11)}
print (ss)
ss1={x for x in 'abc123abc'}
print(ss1)
ss2=[x for x in 'abc123abc']
print(ss2)


=================  python  匿名表达式 ======================
# 匿名表达式 lambda
def add(x,y):
    #语句块
    return x+y
print(add(5,6))

f=lambda x,y : x+y
print(f(1,2))

f= lambda x,y: x if x>y else y
print(f(7,5))                                                                                                                                                                                                                                                                                                                                          

#三目表达式
#  x > y ?  x: y  

#sorted
# 排序  sorted
my_list=[1,2,3,1,3,3,5,1]
print(sorted(my_list))


mylist= [
    ('a', 2),
    ('b',  5),
    ('c', 1)
]
print(mylist)
print(sorted(mylist,key=lambda x: x[1] ))
print(sorted(mylist,key=lambda x: x[1] ,reverse=True))

#高阶函数
mylist= [1,2,3,4,5,6]
res=[]
for i in mylist:
    res.append(i**2)
print(res)
#map 映射 结合 lambda
res=map(lambda x: x**3 , mylist)
print(type(res))
print(res)
print(list(res))

mylist1= [1,2,3,4,5,6]
mylist2= [1,2,3,4,5,6]
res=map(lambda x,y: x+y, mylist1,mylist2)
print(list(res))


from  functools  import reduce
#reduce 规约
mylist1= [1,2,3,4,5,6]
res=reduce(lambda x,y: x+y , mylist)
print(res)
# 1+.. 100 sumer
res=0
for i in range(1,101):
    res +=i
print(res)

from  functools import reduce

res=0
res=reduce(lambda x,y : x+y, range(1,101))
res=reduce(lambda x,y : x+y, range(1,101,199))
print(res)

mylist=['1','2','3','4','5']
vmylist=['1','2','3','4','5']
res=0
res=reduce(lambda x,y: x+y ,range(1,101),200)
print(res)
mylist=['1','2','3','4','5']
res=reduce(lambda x,y: x+y ,mylist,'aaa')
print(res)

#高阶函数   过滤 filter
my_list=[1,2,3,1,3,3,5,1]
res=[]
res=filter(lambda x : True if x !=1 else False,my_list)
print(list(res))

===============  file   文件操作  ===============
import sys
import os
from posixpath import split
# print(os.system('ipconfig'))
print(os.getcwd())
file1=os.getcwd()+'/py3.py'
file='py31.py'
print(os.path)
print(os.path.split(file1))
print(os.path.isabs(file))
print(os.path.exists(file))
# os.mkdir('test')
# os.system('cd d:\\')
# print(os.environ.split(';'))
# print(os.getcwd())

print(sys.version)
print(sys.platform)
print(sys.copyright)
print(sys.maxsize)
print(sys.argv)
print(sys.path)
# sys.exit(0)
print(sys.getdefaultencoding())
print(sys.getfilesystemencoding())
print(sys.getrecursionlimit())
sys.setrecursionlimit(200)
print(sys.getrecursionlimit())

def recuFunc(i):
    print(i)
    recuFunc(i+1)

recuFunc(1)
+++



# with open ('data_cn.txt','w',encoding='utf-8') as file:
#     file.write('我爱python')

# with open('data_cn.txt','r',encoding='utf-8') as  file:
#     print(file.read())

import  os
import  shutil
print(os.getcwd())
dirpath= r'd:\dirdemo'
# if not os.path.exists(dirpath):
#     os.mkdir(dirpath)
# else:
#     os.rmdir(dirpath)

filenames= os.listdir(os.getcwd())
# for fname in filenames:
#     print(fname)
for dirpath,subdirs,files in os.walk(os.getcwd()):
    for name in subdirs:
        print("dir",os.path.join(dirpath,name))
    for name in files:
        print("wenj",os.path.join(dirpath,name))# r  read  


# w write 
# a+  读写

# file = open('d:\\data.txt','r')
# file = open('d:/data.txt','r')
file = open(r'd:/data.txt','r')
file.seek(6)
print(file.readable())
print(file.writable())
data=file.read(6)

data=file.readline()
while data:
   print(data, end='')
   data=file.readline()

datas=file.readlines()
print(type(datas))
for line  in datas:
    print(line,end='')
file.close()

with open ('file_write.txt','a') as file:
    # data ='hell python\n'
    # file.write(data)
    # data ='i am snipe'
    # file.write(data)

    datas=['hello python','i am sniipe','i like 1']

    # for data in datas:
    #     file.write(data+'\n')

    # file.writelines([data+'\n' for data in datas])
    # file.writelines('\n'.join(datas))
    file.write('\n'.join(datas))
 
======================  字符串格式化 ============
# # print("heello%s" %"hello") 
# ss="hello world |%+20.2s|"
# print(ss  % "hello")

dd="hello world |%20.2d|"
print(dd  % 13.9876)
print(dd  % -13)

name =["wanglong",12,"zq"]
age=-18
gongzi=3232342.3342
print(("name is {}, age is {}, gongzi is {}").format(name,age,gongzi))
# print((f"name is {name[1]:#b20}, age is {age:^+010}, gongzi is {gongzi:,.2f}"))
print((f"name is {name}, age is {age:^+010}, gongzi is {gongzi:,.2f}"))

par={'x':1,'y':2,'z':3}
print("dict: {0[x]}  {0[y]}  {0[z]}".format(par))
print("dict: {0}  {0}  {0}".format(par))

print("name is {}, age is {}, gongzi is {}".format(name[0],age,gongzi))

===================  闭包 ==================
rate =6
def func_out():
    # rate =6
    def  transfer(doller):
        return doller * rate
    return transfer

rate=7
f=func_out()
print(f(10))

++++
orgin = 0
def creater(start):
    def gogo(step):
        nonlocal start
        target = start + step
        start = target
        
        return target
    return gogo

f = creater(orgin)
print(f(2))
print(f(3))
print(f(6))

===================== 正则表达式  ===================
import re
match=re.search(r'[1-9]\d{5}','bti 100081 200881')
if match:
    print(match.group(0))
print("****************")
match=re.match(r'[1-9]\d{5}','bti 100081')
if match:
    print(match.group(0))
print("****************1")
match=re.match(r'[1-9]\d{5}','100081 bit')
if match:
    print(match.group(0))

print("****************2")
match=re.findall(r'[1-9]\d{5}','bti 100081 200881')
print(match)

print("****************3")
aa=re.split(r'[1-9]\d{4}', 'bit10081   tsu10084')
print(aa)

print("****************5")
aa=re.split(r'[1-9]\d{5}', 'bit100081   tsu100084' , maxsplit=1)
print(aa)
print(re.split(r'[1-9]\d{5}', 'bit100081   tsu100084' , maxsplit=2))

print("****************6")
for m in re.finditer(r'[1-9]\d{5}','bti 100081 tsu100084'):
    if m:
        print(m.group(0))
print("****************7")
print(re.sub(r'[1-9]\d{5}',':zipcode', 'bit100081  tsu100084'))

print('************8')
pat=re.compile(r'[1-9]\d{5}')
rst = pat.search('bit100081 bit100082')
print(rst.group(0))
# print(rst.group(1))

a = "123abc456"
print( re.search("([0-9]{3})([a-z]{3})([0-9]{3})",a).group(0))
print( re.search("([0-9]{3})([a-z]{3})([0-9]{3})",a).group(1))
print( re.search("([0-9]{3})([a-z]{3})([0-9]{3})",a).group(2))
print( re.search("([0-9]{3})([a-z]{3})([0-9]{3})",a).group(3))

a= "//quote.eastmoney.com/unify/r/1.605303"
match=re.findall(r'6\d{5}$',a)
print(match)

+++++
import re
# # htmlstr='''
# # <td>pythonc</td><td>$123</td><td>12345@qq.com</td>'''
# # result=re.findall(r"<td>(.+?)</td>",htmlstr)
# # print(result)
# # # /

# # str="""
# # 'hello'  "python" 'love" "hehe'
# # """
# # result=re.findall(r"('|\")(\w+)(\1)",str)
# # print(result)
# # print([x[1] for x in result])

# # result=re.findall(r"^\d{11}$","13795115470")
# # print(result)
# # result=re.findall(r"a+","abc123abbbef")
# print(result)
# print(result.group())
# print(result.group(0))
# # print(result.group(1))

# result=re.findall(r"indunisr(?:y|ies)","indunisrie")
# print(result)

# result=re.findall(r"Windows(?!=95|98|NT|2000)","Windows2000")
# print(result)
result=re.findall(r"(?:=95|98|NT|2000)Windows","98windows",re.I)
print(result)

# result=re.findall(r"#[a-z0-9_\.-]+)@([da-z]\.-)\.([a-z\.]{2,6}$","wangl@163.com")
# print(result)
# # # result=re.findall(r"(?<!95|98|NT|2000)Windows","3.1windows")
# print(result)

# result=re.findall(r"(?=95|85|nt|2000)windows","2000windows")
# print(result)



=============== 随机数 ============
import random
#整数
print(random.randint(1,100))
print(random.randrange(2,102,2)) #偶数
print(random.randrange(1,101,2)) #奇数
#浮点数
print(random.random())
print(random.uniform(11.1,13.1))
#非数字型随机抽样
targetlits=['a','b','c','e','f']
print(random.choice(targetlits))
#乱序
print(targetlits)
random.shuffle(targetlits)
print(targetlits)

print(random.sample(targetlits,4))
print(targetlits)
+++

import random,string

def gen_radom_string(length):
    numcount=random.randint(1,length-1)
    lettercount=length-numcount

    numlist=[random.choice(string.digits) for _ in range(numcount)]
    letterlist=[random.choice(string.ascii_letters) for _ in range(lettercount)]
    alllist=numlist+letterlist

    random.shuffle(alllist)
    result="".join(alllist)
    return result

for _ in range(10):
    string1=gen_radom_string(18)
    print(string1)

=======================datetime  =====================
import  logging
import datetime,time
# 生成日期
d=datetime.date.today()
print(d,type(d))
d=datetime.date(2022,8,24)
print(d,type(d))

d=datetime.date.fromtimestamp(time.time())
print(d)
#类属性
print(datetime.date.min)
print(datetime.date.max)
print(datetime.date.resolution)
#date对象-结构化对象
print(d.timetuple())

#实例属性
print(d.year)
print(d.month)
print(d.day)

print(d.replace(2030))
print(d.replace(d.year,9))
print(d.replace(day=19))
print(d.replace(d.year,d.month,24))
print(d.toordinal())
print(d.weekday())
print(d.isoweekday())
print(d.isoformat())
# print(d.strftime("%Y年%m月%d日"))

print('{:=^50}'.format("datetime.time."))
t=datetime.time(15,20,45,8888)
print(t,type(t))
#类方法
print(datetime.time.min)
print(datetime.time.max)
print(datetime.time.resolution)
#实例属性
print(t.hour)
print(t.minute)
print(t.second)
print(t.microsecond)
#其他方法
print(t.isoformat())
print(t.strftime("%H-%m-%d  %f"))

print('{:=^50}'.format("datetime.datatime."))
dt=datetime.datetime(2020,8,20,13,40,33,888888)
print(dt,type(dt))
dt=(datetime.datetime.today())
print(dt,type(dt))
dt=(datetime.datetime.now())
print(dt,type(dt))
dt=(datetime.datetime.utcnow())
print(dt,type(dt))
print("*****************&&&&&&&&&&&&***********************")
dt=datetime.datetime.fromtimestamp(time.time())
print(dt,type(dt))
dt=datetime.datetime.strptime("2020-07-14 03:14:46","%Y-%m-%d %H:%M:%S")
dt=datetime.datetime.combine(d,t)
print(dt)
#实例属性
print(dt,type(dt))
print(dt.year)
print(dt.month)
print(dt.day)
print(dt.hour)
print(dt.minute)
print(dt.second)
print(dt.microsecond)
#replace
print(dt.replace(second=59,day=11))
print(dt.timetuple())
print(dt.timestamp())
print(dt.strftime('%Y-%m-%d %H:%M:%S %f'))
print(datetime.datetime.fromtimestamp(time.mktime(time.localtime())))

# datetime.timedelta
print('{:=^50}'.format("datetime.timedelta."))
td=datetime.timedelta(days=10)
print(td)
td=datetime.timedelta(days=10,hours=5)
print(td)
td=datetime.timedelta(days=-5,hours=-8)
print(td)
td=datetime.timedelta(weeks=2)
print(td,type(td))
td=datetime.timedelta(hours=75)
print(td,type(td))

print('{:=^50}'.format("logging"))
#标准库 logging



#默认日志级别为Warning
#使用baseconfig()来制定输出级别

# print("this hsi print log")
logging.basicConfig(level=logging.WARN,filename='log.txt',filemode='a')
logging.debug("this his debug log")
logging.info("this his info log")
logging.warning("this his warning log")
logging.error("this his error log")
logging.critical("this critical log")

# #向日志输出变量
# logging.basicConfig(level=logging.DEBUG)
# name ='张三'
# age = 18
# print("test")
# logging.debug("姓名 %s,  年龄 %d" ,name, age)
# logging.debug("姓名 %s,  年龄 %d" %(name, age))
# logging.debug("姓名 {},  年龄 {}".format(name, age))
# logging.debug(f"姓名{name},  年龄{age} " )

===============  time  =======================
import time
# #时间戳 结构化时间对象， 结构化字符串
# #时间戳 1970.1.1开始的时间， 单位是秒
print(time.time())
print(time.time()-3600) #一个小时前

st=time.localtime()
print(type(st))
# print(st)              #tm_wday 0=星期一
print('today is {}-{}-{:02d}'.format(st[0],st[1],st[2]))
print('today is 星期  {}'.format(st.tm_wday+1))
# #对象是只读的， 不能更改

# #格式化时间字符串
print(time.ctime())
#strftime(时间格式） '%Y-%m-%d %H:%M:%S')
print(time.strftime('%Y-%m-%d %H:%M:%S'))
print(time.strftime('%Y-%m-%d %H:%M:%S %a' ))
print(time.strftime('%Y-%m-%d %H:%M:%S %A'  ))
print(time.strftime('%Y-%m-%d %H:%M:%S %b'))
print(time.strftime('%Y-%m-%d %H:%M:%S %B'))
print(time.strftime('%Y-%m-%d %H:%M:%S %w'))
print(time.strftime('%Y-%m-%d %H:%M:%S %W'))
print(time.strftime('%Y-%m-%d %H:%M:%S %p'))
print(time.strftime('%Y-%m-%d %I:%M:%S %p'))
# print(time.strftime('%Y年%m月%d日 %H:%M:%S'))

# #sleep
t1=time.time()

print("sleep begin")
time.sleep(1.23)
print('sleep end')
t2=time.time()
print('runing time {:.3f}'.format(t2-t1))

# #UTC   格林威治时间
print(time.gmtime())
print(time.gmtime(time.time()))
#local
print(time.localtime)
print(time.localtime(time.time()))

print(time.time())
print(time.localtime())
print(time.mktime(time.localtime()))

print(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime()))
print(time.strftime('%Y-%m-%d %H:%M:%S',time.gmtime()))

#格式化字符转时间对象
#strptime(str,format)

strtime='2020-07-25 13:23:18'
print(time.strptime(strtime,'%Y-%m-%d %H:%M:%S'))

time.timezone(9)
time.time()

