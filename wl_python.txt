
https://pypi.org/project/pip/
下载：pip  setuptools  django uwsgi

1 安装 python3

	yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc make

	下载好了之后在文件所在目录解压
	tar -xvf Python-3.7.0.tgz
	配置编译
	进入到解压的python的目录里面，使用`Python3.7.0/configure`文件进行配置
	cd Python-3.7.0
	配置编译的的路径
	./configure --prefix=/opt/python/python-3.7.0
	安装依赖项
	安装Python 3.7所需的依赖:
	yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc make
	下载Python
	在官网下载所需版本，这里用的是3.7.0版本
	wget https://www.python.org/ftp/3.7.0/Python-3.7.0.tgz
	安装Python
	通过解压，配置编译，编译安装等步骤完成
	解压
	下载好了之后在文件所在目录解压
	tar -xvf Python-3.7.0.tgz
	配置编译
	进入到解压的python的目录里面，使用`Python3.7.0/configure`文件进行配置
	cd Python-3.7.0
	配置编译的的路径
	./configure --prefix=/usr/local/python-3.7.4

	优化选项（可选）：
	执行完上一步后会提示执行以下的代码对Python解释器进行优化，执行该代码后，会编译安装到 /usr/local/bin/ 下，且不用添加软连接或环境变量
	./configure --enable-optimizations
	编译和安装
	make && make install
	添加软连接
	添加软链或者添加到环境变量，直接输入python3就可以使用了，下边是添加软连接：
	ln -s /usr/local/python-3.7.4/bin/python3 /usr/bin/python3

	vi /etc/profile
	export PATH=$PATH:/usr/local/python-3.7.4/bin

	source  /etc/profile

	安装python3时同时安装了pip　和　setuptools

	可以更新升级相关部件

	
	pip3  install  --upgrade setuptools
	pip3  install --upgrade  pip
	python3 -m django –version  -查看版本

==========================================================================================




2、安装pip前需要前置安装setuptools  (编译安装）

	命令如下：

	wget --no-check-certificate  https://pypi.python.org/packages/source/s/setuptools/setuptools-19.6.tar.gz#md5=c607dd118eae682c44ed146367a17e26
	 
	tar -zxvf setuptools-19.6.tar.gz
	 
	cd setuptools-19.6
	 
	python3 setup.py build
	 
	python3 setup.py install


============================================================

3.  安装django

pip3  install   django

python3 manage.py migrate

djan

--------------------------------------------------------------------
4.  安装sqlite  

	wget https://www.sqlite.org/2019/sqlite-autoconf-3280000.tar.gz
	tar -zxvf sqlite-autoconf-3280000.tar.gz
	cd sqlite-autoconf-3280000

	./configure --prefix=/usr/local
	make && make install
	find /usr/ -name sqlite3

	删除不必要的文件
	rm -rf sqlite-autoconf-3280000*


	mv /usr/bin/sqlite3  /usr/bin/sqlite3_old
	ln -s /usr/local/bin/sqlite3   /usr/bin/sqlite3

	vim ~/.bashrc
	export LD_LIBRARY_PATH="/usr/local/lib"
	source ~/.bashrc

	测试 sqlite：
	python3
	import sqlite3
	sqlite3.sqlite_version  显示版本

---------------------------------------------------------------------
5. 创建Django项目：
django-admin.py startproject 项目名(mysite)
创建项目中的static目录：
cd mysite
mkdir static

更改文件
setting.py 
ALLOWED_HOSTS = ['*']


python3 manage.py migrate


启动Django项目
python3 manage.py runserver 0.0.0.0:8000
选择一个浏览器输入：http://115.159.214.215:8000/
注意：IP地址换成自己的主机IP
python3 mange.py createsuperuser  -产生admin用户

--------------------------------------------------------------------------
6. 安装 uwsgi

pip3  install  uwsgi

uwsgi --http  0.0.0.0:8080 --chdir /root/project/ --wsgi-file project/wsgi.py --master --processes 4 --threads 2 --stat
s 0.0.0.0:9191

# test.py
def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    return [b"Hello World"]

测试：
uwsgi –http :8001 –wsgi-file test.py
	添加并发和监控
	默认情况下，uWSGI 启动一个单一的进程和一个单一的线程。
	你可以用 --processes 选项添加更多的进程，或者使用 --threads 选项添加更多的线程 ，也可以两者同时使用。
	uwsgi --http :9090 --wsgi-file foobar.py --master --processes 4 --threads 2
	以上命令将会生成 4 个进程, 每个进程有 2 个线程。
	如果你要执行监控任务，可以使用 stats 子系统，监控的数据格式是 JSON：
	uwsgi --http :9090 --wsgi-file foobar.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191
	我们可以安装 uwsgitop（类似 Linux top 命令） 来查看监控数据：
	pip install uwsgitop
	结合 Web 服务器使用
	我们可以将 uWSGI 和 Nginx Web 服务器结合使用，实现更高的并发性能。
	一个常用的nginx配置如下：

	location / {
		include uwsgi_params;
		uwsgi_pass 127.0.0.1:3031;
	}

	现在，我们可以生成 uWSGI 来本地使用 uwsgi 协议：
	uwsgi --socket 127.0.0.1:3031 --wsgi-file foobar.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191
	如果你的 Web 服务器使用 HTTP，那么你必须告诉 uWSGI 本地使用 http 协议 (这与会自己生成一个代理的–http不同):
	uwsgi --http-socket 127.0.0.1:3031 --wsgi-file foobar.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191

ini 配置：
	uwsgi 配置
	uwsgi支持ini、xml等多种配置方式，本文以 ini 为例， 在/etc/目录下新建uwsgi8001.ini，添加如下配置：

	[uwsgi]
	#pythonpath = /usr/local/lib/python2.7/site-packages //因为python重新安装过的，所以目录要指定到这个
	pythonpath = /usr/local/lib/python3.6/site-packages
	socket = 127.0.0.1:8001
	master = true         //主进程
	vhost = true          //多站模式
	no-site = true        //多站模式时不设置入口模块和文件
	workers = 2           //子进程数
	reload-mercy = 10     
	vacuum = true         //退出、重启时清理文件
	max-requests = 1000   
	limit-as = 512
	buffer-size = 30000
	pidfile = /var/run/uwsgi8001.pid    //pid文件，用于下面的脚本启动、停止该进程
	daemonize = /website/uwsgi8001.log  //因为python重新安装过的，所以目录要指定到这个

	另外要新建一个/website目录，否则也会报错！！

uwsgi --ini /etc/uwsgi8001.ini  测试

----------------------------------------------------------------------------------------------


7.  安装nginx
 yum  install wget -y
 wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
 yum  install nginx -y
 
测试：  systemctl  start  nginx
  访问： ip  可看到nginx 欢迎界面。
  
  编译安装：
  tar zxvf nginx-1.6.2.tar.gz
  ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module  --with-http_gzip_static_module 
  make  && make  install
  
  /usr/local/webserver/nginx/sbin/nginx -v   查看版本
  # /usr/local/webserver/nginx/sbin/nginx -t  检查配置文件nginx.conf的正确性命令
  配置模版：
   /usr/sbin/groupadd www   建组
   /usr/sbin/useradd -g www www  建用户
  cat /usr/local/webserver/nginx/conf/nginx.conf
 			user www www;
			worker_processes 2; #设置值和CPU核心数一致
			error_log /usr/local/webserver/nginx/logs/nginx_error.log crit; #日志位置和日志级别
			pid /usr/local/webserver/nginx/nginx.pid;
			#Specifies the value for maximum file descriptors that can be opened by this process.
			worker_rlimit_nofile 65535;
			events
			{
			  use epoll;
			  worker_connections 65535;
			}
			http
			{
			  include mime.types;
			  default_type application/octet-stream;
			  log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
			               '$status $body_bytes_sent "$http_referer" '
			               '"$http_user_agent" $http_x_forwarded_for';
			  
			#charset gb2312;
			     
			  server_names_hash_bucket_size 128;
			  client_header_buffer_size 32k;
			  large_client_header_buffers 4 32k;
			  client_max_body_size 8m;
			     
			  sendfile on;
			  tcp_nopush on;
			  keepalive_timeout 60;
			  tcp_nodelay on;
			  fastcgi_connect_timeout 300;
			  fastcgi_send_timeout 300;
			  fastcgi_read_timeout 300;
			  fastcgi_buffer_size 64k;
			  fastcgi_buffers 4 64k;
			  fastcgi_busy_buffers_size 128k;
			  fastcgi_temp_file_write_size 128k;
			  gzip on; 
			  gzip_min_length 1k;
			  gzip_buffers 4 16k;
			  gzip_http_version 1.0;
			  gzip_comp_level 2;
			  gzip_types text/plain application/x-javascript text/css application/xml;
			  gzip_vary on;
			 
			  #limit_zone crawler $binary_remote_addr 10m;
			 #下面是server虚拟主机的配置
			 server
			  {
			    listen 80;#监听端口
			    server_name localhost;#域名
			    index index.html index.htm index.php;
			    root /usr/local/webserver/nginx/html;#站点目录
			      location ~ .*\.(php|php5)?$
			    {
			      #fastcgi_pass unix:/tmp/php-cgi.sock;
			      fastcgi_pass 127.0.0.1:9000;
			      fastcgi_index index.php;
			      include fastcgi.conf;
			    }
			    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico)$
			    {
			      expires 30d;
			  # access_log off;
			    }
			    location ~ .*\.(js|css)?$
			    {
			      expires 15d;
			   # access_log off;
			    }
			    access_log off;
			  }
			 
			}
			
静态资源没有配置，导致admin界面进去之后都是丢失了css样式的
	解决步骤：
	在/website目录下新建目录static
	修改项目目录下settings.py，增加下面这行：
	STATIC_ROOT = '/website/static/'
	再在nginx里给这个目录取一个别名
	location /static {
		alias /website/static/;
	}
	意思就是外部访问我的 域名/static  时候就可以访问到/website/static这个目录
	使用python manage.py collectstatic，将项目需要的静态资源搜集到指定的STATIC_ROOT对应的目录下。也即是这个nginx刚刚取了别名的目录/website/static/。
	
	python manage.py collectstatic
	
			
=========================================================================================================================== 
8.    Nginx 配置 支持 uwsgi

找到nginx的安装目录（如：/usr/local/nginx/），打开conf/nginx.conf文件，修改server配置：
		server {
				listen       80;
				server_name  localhost;
				
				location / {            
					include  uwsgi_params;
					uwsgi_pass  127.0.0.1:9090;              //必须和uwsgi中的设置一致
					uwsgi_param UWSGI_SCRIPT demosite.wsgi;  //入口文件，即wsgi.py相对于项目根目录的位置，“.”相当于一层目录
					uwsgi_param UWSGI_CHDIR /root/Penn/demosite/;       //项目根目录！！！
					index  index.html index.htm;
					client_max_body_size 35m;
				}
			}


9. 部署 uwsgi+ Django
	Django 是最常使用的 Python web 框架，假设 Django 项目位于 /home/foobar/myproject:

	uwsgi --socket 127.0.0.1:3031 --chdir /home/foobar/myproject/ --wsgi-file myproject/wsgi.py --master --processes 4 --threads 2 --stats 127.0.0.1:9191

	--chdir 用于指定项目路径。

	我们可以把以上的命令弄成一个 yourfile.ini 配置文件:

	[uwsgi]
	socket = 127.0.0.1:3031
	chdir = /home/foobar/myproject/
	wsgi-file = myproject/wsgi.py
	processes = 4
	threads = 2
	stats = 127.0.0.1:9191
	接下来你只需要执行以下命令即可：
	uwsgi yourfile.ini
	
				
    ningx  +django 静态资源没有配置，导致admin界面进去之后都是丢失了css样式的
解决步骤：
	在/website目录下新建目录static
	修改项目目录下settings.py，增加下面这行：
	STATIC_ROOT = '/website/static/'
	再在nginx里给这个目录取一个别名
	location /static {
		alias /website/static/;
	}
	意思就是外部访问我的 域名/static  时候就可以访问到/website/static这个目录
	使用python manage.py collectstatic，将项目需要的静态资源搜集到指定的STATIC_ROOT对应的目录下。也即是这个nginx刚刚取了别名的目录/website/static/。

	
	在settings.py中设置一下media的路径
    STATIC_ROOT = '/root/project/static/'
    MEDIA_ROOT = '/website/media'
	python manage.py collectstatic

	
	
10. 部署 uwsgi+Flask
	Flask 是一个流行的 Python web 框架。

	创建文件 myflaskapp.py ，代码如下：

	from flask import Flask

	app = Flask(__name__)

	@app.route('/')
	def index():
		return "<span style='color:red'>I am app 1</span>"
	执行以下命令：

	uwsgi --socket 127.0.0.1:3031 --wsgi-file myflaskapp.py --callable app --processes 4 --threads 2 --stats 127.0.0.1:9191

11  文件上传解决
图片的上传

需要在admin的models下有个能上传图片的表，在models.py中定义表结构如下

class Shop(models.Model):
    name = models.CharField(max_length=200)
    lat = models.FloatField(default=0)
    lng = models.FloatField(default=0)
    addr = models.CharField(max_length=500)
    phone = models.CharField(max_length=20)
    imgUrl = models.ImageField(u'图片',upload_to='uploadImages')
    status = models.IntegerField(default=0)
    notes = models.CharField(max_length=500)
    addDate = models.DateTimeField(u'添加时间', auto_now_add=True, editable=True)
    updateTime = models.DateTimeField(u'更新时间', auto_now=True, null=True)
在settings.py中设置一下media的路径

MEDIA_ROOT = '/website/media'
MEDIA_URL = '/media/'
在admin.py下新加一条注册模型的语句

admin.site.register([Test,Shop])
 

 

 

同时在website目录下新建media目录

在nginx的配置文件中同样的新建一个media对应的别名

 

location /media{
    alias /website/media/;
}
在项目根目录下执行以下指令，来重新生成数据库

python3 manage.py makemigrations WxModel  # 让 Django 知道我们在我们的模型有一些变更
python3 manage.py migrate WxModel   # 创建表结构
另外还缺少一个Pillow的库，是要使用ImageField类型的字段需要的一个图形库，使用pip安装

pip3 install Pillow
 

重启nginx和uwsgi后成功
————————————————
版权声明：本文为CSDN博主「wangpeng2011314」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/wangpeng2011314/article/details/80993178
=================================================================================================

yum  install wget  ntpdate -y

wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
yum  install  epel-release -y 
sed -i -e '/mirrors.cloud.aliyuncs.com/d' -e '/mirrors.aliyuncs.com/d' /etc/yum.repos.d/CentOS-Base.repo
yum  makecache

timedatectl 
timedatectl list-timezones
timedatectl set-timezone Asia/Shanghai
ntpdate  time.nist.gov
ntpdate asia.pool.ntp.org
clock - 系统时钟
hwclock - 硬件时钟
hwclock -w  -- sys to  hwclock

yum  installgroup "fonts"
localectl 
lcoalectl set-locale LANG=zh_CN.utf8
locale -a |grep "zh_CN"
vim  /etc/profile
	export  LANG=zh_CN.UTF-8
source /etc/profile
hostnamectl  set-hostname  hostname

mariadb：
yum install mariadb-server -y
mkdir -p /data/mysql
chown -R  mysql:mysql /data/mysql
mysql_install_db  --datadir=/data/mysql
systemctl enable mariadb
systemctl start mariadb
mysqladmin -u root password pass  # 设置msyql  root 密码
mysql -u root -p   #登陆mysql
grant all privileges on *.* to root@'%' identified by 'pass';
flush privileges;
\q
