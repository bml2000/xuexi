


http://blogs.studylinux.net

常用命令：
    Stress- 压力测试工具
	环境变量
    export
        export  查看环境变量
            export PATH=$PATH:/opt/au1200_rm/build_tools/bin 设置环境变量
    设置用户启动环境
        /etc/profile.d/xxx.sh
            export PATH=$PATH:/opt/au1200_rm/build_tools/bin 设置环境变量
    noset    环境变量取消设置


1. 网络ip设置
    /etc/sysconfig/network-scripts/ifcfg-eth0
    DEVICE=eth0                // 这是网卡的名称
    TYPE=Ethernet              // 网卡类型
    ONBOOT=yes                 // 是否随着开机自启动
    BOOTPROTO=static           // static表示固定ip地址，dhcp表示随机获取ip
    IPADDR=192.168.10.150      // 手动设置的固定ip地址
    NETMASK=255.255.255.0      // mask地址，就是掩码
    GATEWAY=192.168.10.1       // 网关地址  
    DNS1=114.114.114           // DNS 服务器地址
    SERCTL=no #[yes|no]（非root用户是否可以控制该设备）
    BOOTPROTO=static #[none|static|bootp|dhcp]（引导时不使用协议|静态分配|BOOTP协议|DHCP协议）

    查看IP
      ip addr show
      nmap  ip  查看ip端口情况
            -sU  ip   UDP 扫描
            -sT  ip   TCP 扫描
            -sP  ip   ping扫描
            -sS  ip   TCP SYN 扫描

    禁用 IPV6 , CentOS7中禁用IPV6
        vi /etc/sysctl.conf
        net.ipv6.conf.all.disable_ipv6 = 1
        net.ipv6.conf.default.disable_ipv6 = 1
        sysctl -p       
    
2、修改网关
　　vi /etc/sysconfig/network
　　NETWORKING=yesvim
　　HOSTNAME=Aaron
　　GATEWAY=192.168.30.1  

3、DNS　
　　配置文件在/etc/resolv.con

　　vi /etc/resolv.conf
　　nameserver 202.109.14.5 #主DNS
　　nameserver 219.141.136.10 #次DNS
　　search localdomain
    
    host解析：
    /etc/hosts
     ip   hostname   指定hostname对应IP 地址
     
3.1      DNS 测试工具
            dig 命令
                • 使用格式：dig [-t RR_TYPE] name [@server] [query options]
                • OPTIONS:
                • -t : 指定资源记录类型，一般为A记录，或者NS记录。
                • +[no]trace : DNS解析路由跟踪
                • +[no]recurse : 进行递归解析
                • -x : 反向解析
                  dig +trace -t NS weizhenping.me @172.16.36.70
            host 命令
                • 使用格式：host [-t RR_type] name SERVER_IP
                • 示例：
                  host [-t RR_type] name SERVER_IP
            nslookup
                • 交互式命令，设置参数如下：
                • server 202.96.209.133 #设置默认的解析DNS服务器
                set type=mx : 设置解析的资源记录类型
				
		/etc/nsswitch.conf
		 hosts   files,dns
		   指定 dns解析顺序
		/etc/service  -各服务对于端口号
		

4、修改主机名
       vi /etc/sysconfig/network，
       HOSTNAME=HOSTNAME
       修改HOSTNAME一行为HOSTNAME=主机名，重启后才能生效
       
    /etc/hostname -定义主机名称
    
    hostnamectl  set-hostname  xxx
    
       

5.  tar 使用
        -c  创建
        -x  释放
        -t  查看
        -v 显示过程
        -z  bzip压缩
        -j  bzip2 压缩
        -p  保留原属性
        -C  将工作目录更改指定目录
        总结
            1、*.tar 用 tar –xvf 解压 
            2、*.gz 用 gzip -d或者gunzip 解压 
            3、*.tar.gz和*.tgz 用 tar –xzf 解压 
            4、*.bz2 用 bzip2 -d或者用bunzip2 解压 
            5、*.tar.bz2用tar –xjf 解压 
            6、*.Z 用 uncompress 解压 
            7、*.tar.Z 用tar –xZf 解压 
            8、*.rar 用 unrar e解压 
            9、*.zip 用 unzip 解压
        
6. 网络服务：
     重启网络服务
        service network restart
        ifup  eth0
        ifdown eth0   关闭网络端口
    网络命令
        ip          --iproute 安装包
        ss          --iproute 安装包
        ifconfig    --net-tools  安装包
        route
        traceroute
        ping
        nmap
            是一款非常实用的扫描工具，适用于linux、windows、mac三大主流平台。 
            $wget http://nmap.org/dist/nmap-7.01.tar.bz2
            $tar -xvf nmap-7.01.tar.bz2 
            nmap -v #检测是否安装成功：
            nmap 192.168.1.2  #扫描特定主机：
            nmap 192.168.1.1/24  #扫描整个子网
            nmap 192.168.1.2 192.168.1.5  #扫描多个目标
            nmap 192.168.1.1-100 (扫描IP地址为192.168.1.1-192.168.1.100内的所有主机) 
                    # 扫描一个范围内主机
            nmap -sn -PE -c 2 --send-ip 192.168.1.1 #向目标发送两个ping数据包
        netstat
            -a (all)显示所有选项，默认不显示LISTEN相关
            -t (tcp)仅显示tcp相关选项
            -u (udp)仅显示udp相关选项
            -n 拒绝显示别名，能显示数字的全部转化成数字。
            -l 仅列出有在 Listen (监听) 的服務状态
            -p 显示建立相关链接的程序名 显示出socket所属的进程PID 以及进程名字
            -r 显示路由信息，路由表
            -e 显示扩展信息，例如uid等
            -s 按各个协议进行统计
            -c 每隔一个固定时间，执行该netstat命令。
                   提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到
            # 查看Linux端口号
            --inet 显示ipv4相关协议的监听
            查看IPV4端口上的tcp的监听
            netstat -lntp --inet
            netstat -anp | grep 80          # 查看服务对应端口
            netstat -nlp
            netstat -alnpt  

    centos7   mac 地址冲突解决
    vmware  克隆后 网卡可能不好用        
    执行  systemctl  stop NetworkManager
          systemctl  start NetworkManager
	查看网卡设备
        mwcli  show con
    新增加网卡
        nmcli  con show - 查看网卡设备名称
        nmcli con add con-name ens34 type ethernet ifname ens34  加网卡设备 （名称与查询的设备名称相同）
    
6.1 服务
    systemctl
        systemctl is-enabled firewalld.service 设置开机启动
        systemctl list-unit-files|grep enabled 查看开机启动服务列表
        systemctl --failed                      查看启动失败列表
        systemctl status firewalld.service  显示一个服务的状态：
        systemctl enable firewalld.service 在开机时启用一个服务：
        systemctl disable firewalld.service 在开机时禁用一个服务：
    chkconfig
    将 abc.servic 复制到：/etc/init.d 目录中
        chkconfig --list        #列出所有的系统服务
        chkconfig --add httpd        #增加httpd服务
        chkconfig --del httpd        #删除httpd服务
        chkconfig --level httpd 2345 on        #设置httpd在运行级别为2、3、4、5的情况下都是on（开启）的状态
        chkconfig --list        #列出系统所有的服务启动情况
        chkconfig --list mysqld        #列出mysqld服务设置情况
        chkconfig --level 35 mysqld on        #设定mysqld在等级3和5为开机运行服务，--level 35表示操作只在等级3和5执行，on表示启动，off表示关闭
        chkconfig mysqld on        #设定mysqld在各等级为on，“各等级”包括2、3、4、5等级
    
    service 配置文件
        [Service]
        Type=forking
        WorkingDirectory=/usr/local/abc/
        ExecStart=/bin/bash uams.sh start
        ExecStop=/bin/bash uams.sh stop
        ExecReload=/bin/bash uams.sh restart
        Restart=on-failure

        [Install]
        WantedBy=multi-user.target
    例子：
        启动abc服务
        systemctl restart abc  #启动
        systemctl enable abc   #配置自启
        systemctl stop  abc   #停止服务
        systemctl status  abc  #检测状态

    后台运行nohup
        如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。
        该命令可以在你退出帐户之后继续运行相应的进程。nohup就是不挂起的意思( no hang up)。 
        该命令的一般形式为：
    nohup conmmand &
        如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件：
        nohup command > myout.file 2>&1 
        在上面的例子中，输出被重定向到myout.file文件中。
        1>/data/kafka/log/kafka.out 2>&1 &表示后台启动，将标准输出和错误输出到kafka.out文件
        command >out.file 2>&1 &
        在上面的例子中，2>&1表示所有的标准输出和错误输出都将被重定向到一个叫做out.file 的文件中。
        
6.2 防火墙
    启动防火墙
    service  iptables start /stop
    查看配置
        iptables -L  
    清除规则    
        iptables -F
     
    查看规则：
		iptables -nvL  --line-number    # 显示行号和端口号及详情
       	
    system-config-firewall-tui 图形界面设置防火墙
    
    设置实例
        iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT
        service iptables save

    iptables 配置文件位置： /etc/sysconfig/iptables  iptables/  iptables-config
        保存： iptables-save
        恢复： iptables-restore
        4个表  -t： filter、nat、mangle、raw 
        5个链： RREROUTING 、INPUT、FORWARD、OUTPUT、POSTROUTING
        动作 -j ：  ACCEPT  DROP  REJECT MASQUERADE
        iptables -I INPUT -p icmp  --icmp-type 8 -j DROP   # 可以ping出， 不许ping 入
        iptables -nvL
        iptables -F  clean
        iptables -P    设置某条规则链的默认动作
        iptables  -P INPUT ACCEPT
        iptables  -P  FORWARD  DROP
        iptables -X  删除用户定义链
    用 yum install iptables-services 安装或更新服务
    再使用systemctl enable iptables 启动iptables
    最后 systemctl start iptables 打开iptables
    iptables:
        iptables -A INPUT -i lo -j ACCEPT
        iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        iptables -A INPUT -p tcp --dport 20:21 -j ACCEPT
        iptables -A INPUT -p tcp --dport 30000:30999 -j ACCEPT
        iptables -A INPUT -p icmp --icmp-type 8  -j ACCEPT
        iptables -A INPUT -m state --state NEW -m tcp -p tcp -s 192.168.1.54  --dport 22 -j ACCEPT
        iptables -A OUTPUT   -p tcp -m state --state RELATED,ESTABLISHED -j ACCEPT  
        iptables -A OUTPUT   -p tcp --sport 22  -j ACCEPT 
        iptables -A OUTPUT   -p tcp --sport 20  -j ACCEPT 
        iptables -A OUTPUT  -p icmp  -j ACCEPT
        iptables -A OUTPUT  -d 192.168.1.54 -p tcp --sport 22 -m state --state RELATED,ESTABLISHED -j ACCEPT  
        iptables -P INPUT DROP  
        iptables -P FORWARD DROP  
        iptables -P OUTPUT DROP  
        [root@centos0176 wl]# iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 10050 -j ACCEPT
        [root@centos0176 wl]# iptables-save
		iptables-server  >iptables.cfg   #backup
		iptables-resotre <iptables.cfg   #restore
              
7. selinux：
    配置文件： /etc/sysconfig/seLinux
        enforcoing:启用
        Permissive:显示警告，但不阻止。
        Disable ：停用。
        
    查看状态   
        getenforce
        sestaus
    设置禁用
        setenforce 0 /1  (0 -disable  1-启用)
        setenforce  enforcing/permissive/disable
        
8.  firewall
        systemctl start firewalld
        systemctl  stop  firewalld
        systemctl status  firewalld
        systemctl enable  firewalld  -开机启动
        systemctl  disable firewalld
		firewall-cmd  --get-zones  # 查看zone 名
		firewall-cmd  --get-default-zone   # 当前的zone
		firewall-cmd  --set-default-zone=work  #设置zone
		firewall-cmd  --get-services   # 当前zone下的全部服务
		firewall-cmd --zone=public  --list-services  #zone 下的服务
		firewall-cmd  --zone=public --add-service=https  # 添加service
		firewall-cmd  --zone=public  --remove-service=http  #删除service
		配置模版： /usr/lib/firewalld/services
		运行的服务：  /etc/firwalld/services
		firewall-cmd --get-zone-of-interface=ens33  #查看网卡所在zone
		firewall-cmd --get-active-zone #查看系统网卡所在的zone
		firewall-cmd --zone=dmz  --change-interface=ens37  #将万科放到dmz的zone中
		firewall-cmd  --zone=dmz  --add-interface=lo  #设置网卡到zone中
		firewall-cmd  --zone=dmz  --remove-interface=lo  #删除zone中的网卡
		
        firewall-cmd --help 帮助
        firewall-cmd --zone=public --add-port=80/tcp --permanent 设置防火墙永久打开80 端口
        firewall-cmd --reload                                       更新防火墙规则
        firewall-cmd --zone=public --list-ports     查看打开的端口
        firewall-cmd --get-active-zones 查看区域信息
        firewall-cmd --get-zone-of-interface=eth0 查看指定接口所属区域
        firewall-cmd --zone= public --query-port=80/tcp 查看端口规则
        firewall-cmd --zone= public --remove-port=80/tcp --permanent  删除规则拒绝所有包：firewall-cmd --panic-on
        firewall-cmd --panic-off 取消拒绝状态： 
        firewall-cmd --query-panic 查看是否拒绝
		firewall-cmd --reload   重新加载
 
        
9. RPM

    rpm  查询
        -qi  --info : 查询程序包想着的infomation.包括其版本号、大小、所属的包组等信息
        -qa ,-all : 查询所有已经安装的包
        -ql  --list 列出程序包安装生成的所有文件列表
        -qac --configfiles : 查询指定的程序包提供的配置文件
        -qR --requires: 查询指定程序包的依赖关系
        -qd --docfiles : 列出指定的程序包提供的文档
        -p  对未安装包查询
        -qf  --file FILE : 查询指定的文件是由哪个包安装生成的
        -qg , --group GROUP: 查询指定包由哪个包组提供
    
    rpm -i   --install  安装
         -v : verbos,输出详细信息
         -vv : verbos,输出更详细的信息
         install-options:
         -h : 以hash marks格式输出进度条，每个#代表2%的进度
         --test : 测试安装，只做环境检查，并不真正安装
         --nodeps : 忽略程序依赖关系
         --replacepkgs: 覆盖安装，如果文件修改错误，需要将其找回，可以使用此方法，但需要把修改错误的文件提前删除
         --justdb: 不执行安装操作，只更新数据库
         --noscripts: 不执行rpm自带的所有脚本
         --nosignature: 不检查包签名信息，即不检查来源合法性
        --nodigest:不检查包完整性信息
        
    rpm -e   --erase   卸载
         --allmatches : 卸载所有匹配指定名称的程序包的各版本
         --nodeps : 卸载时忽略依赖关系
         --test : 测试卸载，dry run模式    
    rpm -u  --update   升级
          --oldpackage : 降级
          --force : 强制升级
    rpm -V    自动校验
    rpm -K    手动校验
    rpm  -initdb  初始化
    rpm  -rebuilddb  重建
    
10.  yum
     包 
        yum install  安装
        yum reinstall 重新安装
        yum  update 升级 
        yum remove 卸载 
        yum check-upate 检查更新
        yum list
            • all : 显示所有仓库中的包
            • available : 显示可用的软件包
            • updates : 显示可用于升级的包
            • installed : 显示已经安装的包
            • yum list php* :  显示想着以php开头的所有软件包
  
        yum info  查看包信息
        yum provides  查看文件由哪个包提供
        yum whatprovides ifconfig   #查看命令在哪个包中
        yum clean 清理本地缓存
        yum  makecache  生成缓存
        yum repolist  显示仓库列表
            all : 查看全部的仓库
            enabled : 查看地可用的仓库
            disabled : 查看不可用的仓库
    组 
        yum groupinstall  组安装
        yum grouplist  查看组
        yum groupinfo  组信息
        yum groupremove 组卸载
        yum groupupdate 组更新
        
    yum配置文件及格式：
	    wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
		CentOS 7
		wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
		或者
		curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
		之后运行yum makecache生成缓存
		
		wget http://rpms.remirepo.net/enterprise/remi-release-7.rpm
		yum  localinstall  remi-release-7.repm
	
        /etc/yum.conf
            • 各仓库文件的公共配置，或者不属于仓库的配置，格式如下：
            • [main]：主名称，固定名称
            • cachedir= : 缓存目录
            • keepcache=0:要不要保存缓存
            • exactarch=1:要不要做精确严格的平台匹配
            • gpgcheck=1:检查来源法性和完整性
            • plugins=1:要不要支持插件
            • installonly_limit: 同时安装几个
        /etc/yum.repos.d/*.repo
            • 为仓库的指向及其配置,格式如下：
            • [repository ID] ：ID名称，即仓库名称，不可与其他ID重命
            • name= ： 对ID名称的说明
            • baserul=URL1
                  URL2
                 URL3 （如果同一个源有多个镜像，可以在此我写几个，但每个URL需换行）
            • mirrorlist= (有一台服务器在网络上，保存了多个baseurl，如果使用这项，就不使用baseurl项）
            • enabled={1|0}
            • gpgcheck={1|0}
            • repo_gpgcheck= ： 检查仓库的元数据的签名信息
            • gpgkey=URL (gpg密钥文件）
            • enablegroups= {1|0}}是否在此仓库中上使用组来指管理程序包
            • failovermethod= roundrobin|priority (对多个baseurl做优先级的，roundrobin为轮循，priority为优先级，默认为轮循，意为随机）
            • keepalive= 如果对方是http 1.0是否要保持连接
            • username=  yum的验证用户
            • password=  yum的验证用户密码
            • cost=默认baseurl都为1000
            * 注意：等号左右不能出现空格
    
    实例：
			1、备份
				mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
				2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/
				CentOS 5
				wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo
				CentOS 6
				wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo
				CentOS 7
				wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
				CentOS 7  yum 源
				wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
				或者
				curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
        3、之后运行yum makecache生成缓存

            yum仓库的配置文件示例
                [base]  #光盘的基本软件，即os代表光盘
                name=CentOS $releasever $basearch on local server 172.16.0.1
                baseurl=http://172.16.0.1/cobbler/ks_mirror/CentOS-6.7-$basearch/ #此处如果使用公网公开的repo,这里的地址一定要为repodata目录相同层级地址
                gpgcheck=1
                gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
                enable=1 #如果此项未写，默认表示启用
               [extra] #  extra表示额外的程序
                name=CentOS $releasever $basearch extras
                baseurl=http://172.16.0.1/centos/$releasever/extras/$basearch/
                gpgcheck=0
               [epel]  # 是由公共组织权威维护
                name=Fedora EPEL for CentOS$releasever $basearch on local server 172.16.0.1
                baseurl=http://172.16.0.1/fedora-epel/$releasever/$basearch/
                gpgcheck=0
               [cdrom]
                name=cdrom
                baseurl=file:///media/
                gpgcheck=0
        4、yum 安装包保留
                1、修改yum配置文件/etc/yum.conf
                # vi /etc/yum.conf
                [main]
                cachedir=/var/cache/yum/$basearch/$releasever   
                <----安装包存放路径
                keepcache=1 
                <-----改为1，1代表保留安装包
                debuglevel=2
        5、yum  仅下载， 不安装
                 yum install unixODBC --downloadonly --downloaddir=/usr/local/src    
11  系统监控
        ps
            -e 显示所有进程,环境变量
            -f 全格式
            -h 不显示标题
            -l 长格式
            -w 宽输出
            -a 显示终端上地所有进程,包括其他用户地进程
            -r 只显示正在运行地进程
            -x 显示没有控制终端地进程
            -u 显示更多信息，类似于 -f 选项。

            例子：    
            ps -ef | grep tomcat     查看进程
            ps -aux                 显示所有状态
        
        cpustat
             -cpuprofile  将 CPU 信息写到文件，然后用 cat 命令[10]查看文件
        top
            s - 改变画面更新频率
            l - 关闭或开启第一部分第一行 top 信息的表示
            t - 关闭或开启第一部分第二行 Tasks 和第三行 Cpus 信息的表示
            m - 关闭或开启第一部分第四行 Mem 和 第五行 Swap 信息的表示
            N - 以 PID 的大小的顺序排列表示进程列表（第三部分后述）
            P - 以 CPU 占用率大小的顺序排列进程列表 （第三部分后述）
            M - 以内存占用率大小的顺序排列进程列表 （第三部分后述）
            h - 显示帮助
            n - 设置在进程列表所显示进程的数量
            q - 退出 top

        free 显示空闲内存
            total:总计物理内存的大小。
            used:已使用多大。
            free:可用有多少。
            Shared:多个进程共享的内存总额。
            Buffers/cached:磁盘缓存的大小。
            第三行(-/+ buffers/cached):
            used:已使用多大。
            free:可用有多少。
            空闲内存 = free + buffers + cached = total - used
        
        kill    如果进程运行在后台，那么首先要通过 ps 命令来获取进程ID，然后使用 kill 命令“杀死”进程
            -9 
        
        job  用来查看系统中正在运行的任务，包括后台运行的任务
            -l 选项可以查看当前任务包含的进程ID
        
        fg
            fg %jobnumber  后台任务调到前台
        
        bg
            bg %jobnumber 将后台暂停的任务，调到前台继续运行
                         望将当前任务转移到后台，可以先 Ctrl+z 暂停任务，再使用 bg 命令。任务转移到后台可以空出终端，继续输入其他命令。
        
        df -h  显示当前文件夹及文件大小

        xargs  :   将管道符之前的命令执行的结果，作为arges 之后的输入参数
            ls *.txt | xargs -n1 -i{} mv {} {}_bak  -- 批量改名
                    #类似for循环 -n1 代表逐一对象进行处理 -i{} 代表前面的对象
        find  + exec  组合使用
                -exec 必须由一个 ; 结束，而因为通常 shell 都会对 ; 进行处理，所以用 \; 防止这种情况。 
                {} 可能需要写做 '{}'，也是为了避免被 shell 过滤
            find ./ -type f -exec grep iceskysl {} /dev/null \; 
        screen  : 在一个终端打开多个会话：
            screen  -ls
            screen -r  [screen_no]
            切换：  ctrl+A+D  
            退出：　ctrl+D 或 exit
        nohup - 后台运行
        jobs -l 显示任务
        fg -调入前台
        bg -调入后天
            ctrl+Z  暂停运行

        ntpdate ntp服务器域名或ip 设置时间同步
        date
        clock
        hwclock
            hwclock -r 查看BIOS时间命令
        vi /etc/sysconfig/clock 查看当前时区        
        clock -w 
        tzselect  修改时区命令         
        timeconfig 修改时区命令    
        TZ='Asia/Shanghai'; export TZ　//改为+8中国上海时区 如果知道时区名称也可以直接使用命令
                            
12  文件命令
        locate 
            locate 是透过update程序将硬盘中的所有档案和目录资料先建立一个索引数据库，在 执行loacte时直接找该索引，查询速度会较快，
                    索引数据库一般是由操作系统管理，但也可以直接下达update强迫系统立即修改索引数据库
            -f 将特定的档案系统排除在外，例如我们没有到理要把 proc 档案系统中的档案 放在资料库中。
            -q 安静模式，不会显示任何错误讯息。
            -n 至多显示 n个输出。
            -r 使用正规运算式 做寻找的条件。
            -o 指定资料库存的名称。
            -d 指定资料库的路径
            -h 显示辅助讯息
            -V 显示程式的版本讯息
        upddatedb --更新索引数据库
        
        whereis 从数据库中查找数据,定位指定命令名的二进制、源和帮助页文件
        
        which  在PATH变量指定的路径中，搜索某个系统命令的位置
        
        whatis 用于显示你作为参数输入的命令名的单行描述
            -l 标志来显示完整的描述。
        
        type 命令会输出给定命令的完整路径名
        stat
        man 
        cd
            cd ~  进入用户工作目录home
        
        mkdir  建目录
            mkdir -p  建多级目录
        rm
            rm  -rf  删除多级目录
        
                find  文件查找
                find <指定目录> <指定条件> <指定动作>
                    - <指定目录>： 所要搜索的目录及其所有子目录。默认为当前目录。
                    - <指定条件>： 所要搜索的文件的特征。
                    - <指定动作>： 对搜索结果进行特定的处理。
                    
                    .查找条件:
                        1. 根据文件名和inode查找
                        2. 根据属主、属组查找
                        3. 根据文件类型查找
                        4. 根据逻辑组合条件查找
                        5. 根据文件大小来查找
                        6. 根据时间戳来查找
                        7. 根据权限来查找
                    处理动作:
                        1. -print: 默认动作，显示至屏幕
                        2. -ls: 类似于对查找到的文件执行 ls -l 命令
                        3. -delete: 删除查找到的文件
                        4. -fls file: 查找到的所有长格式的信息保存至指定文件中
                        5. -ok COMMMAND {} \; 对查找到的每个文件执行由COMMAND指定的命令，且都会交互式要求用户确认
                        6. -exec COMMAND {} \; 对查找到的每个文件执行由COMMAND指定的命令；
                        7. {}: 用于引用查找至的文件名称自身
                        8. find 传递查找到的文件至后面指定的命令时，查找到所有符号条件的文件一次性传递给后面的命令
                        9. 有些命令不能接受过多的参数，此时命令执行可能会失败，用 xargs 来规避此问题   find |xargs COMMAND
                例子：
                    find . -name 'my*' # 搜索当前目录中，所有文件名以my开头的文件 -name（文件名需要带后缀）
                    find . -name 'my*' -ls # 搜索当前目录中，所有文件名以my开头的文件，并显示它们的详细信息。
                    find . -size +1000000c（在当前目录下查找文件长度大于1 M字节的文件 ） # 以文件大小来查找 -size n
                    find . -iname "Hessian.properties" # 在当前目录及所有子目录中查找filename(忽略大小写)
        cp
        rm
        ln  -sv     建立文件软连接
        
13  用户管理
        passwd  密码设置
                synopsis:passwd [-k] [-l] [-u [-f]] [-d] [-e] [-n mindays] [-x maxdays] [-w warndays] [-i inactivedays] [-S] [--stdin] [username]
            1、passwd (修改自己的密码)
            2、passwd USERNAME(修改其他用户的密码，root权限 )
               options:
                    -l : 锁定用户，在/etc/passwd的密码前面加!!,
                    -u : 解锁用户，在/etcpasswd的密码前!!取消
                    -d : --delete,删除用户密码
                    -e DATE : --expire,设定过期时间
                    -i DAYS : 非活动时间
                    -n days : 最短使用期限
                    -x days : 最长使用期限
                    -w days : 警告期限
                    --stdin : `echo "PASSWD" | passwd --stdin root` 

        useradd` - create a new user or update default new user information
            useradd [options] LOGIN
              useradd -D [options]
                -u : 指定用户的UID
                -g : 指定GID
                -c : 指定注释信息，如果有空格，需要使用" "包含
                -d : 指定用户家目录,创建用户时，会自动将/etc/skel中的文件复制到用户家目录下，如果指定的文件存                 在将不会复制文件，如果父目录不存在，创建也将会失败
                -s : 指定用户shell
                -r : 指定创建一个系统用户
                -M ：不创建用户家目录
                -G : 指定附加组，多个使用逗号隔开
                -D ：修改创建用户的配置信息，文件位于/etc/default/useradd
                    注：创建用户时的诸多默认设定配置文件为/etc/login.defs
        usermod
                -u : 修改用户UID
                -g : 修改用户GID
                -c : 修改用户的注释信息
                -d : 修改用户家目录，需要配合使用-m选项才会自动复制用户家目录下的文件到新的家目录
                -m : move-home to new directory
                -s : 修改用户的shell
                -l : 修改用户的登陆名，即login名称
                -G : 修改用户的附加组信息，需要配合-a(append)一起使用，如果不使用-a将删除原来的附加组
                -a : --append,连接多个附加组的参数
                -L : 锁定用户，即lock,在/etcpasswd文件中，密码前面加!(一个)
                -U : 解锁用户，即unlock，在/etc/passwd文件中，取消密码前面的!号
        
        userdel [options] LOGIN 删除用户
               -r : 删除用户的同时删除用户的家目录，即--remove参数
    
        su  切换用户 
            su [-] USER
                - : 以登陆方式切换用户，以完成用户环境变量、配置信息加载
                -c : 不用登陆用户即可以以指定用户执行命令
                      `su - mariabd -c 'id -u'`
        id  查看用户信息  
            id [OPTION]... [USERNAME]
                -u : 查看UID号
                -g : 查看GID号
                -G : 查看附加组GID号，其他包含基本组ID号
                -n : 将各ID转换为对应的名称    

         chmod 用户权限管理
            chmod [OPTION]... MODE[,MODE]... FILE...
            chmod [OPTION]... OCTAL-MODE FILE...
            chmod [OPTION]... --reference=RFILE FILE...
               -r --recursive : 递归修改
               --reference : 参照某文件来修改           
                 1、赋权等值法
                    chmod u=rwx,g=rwx,0=rwx FILE
                    chmod a=rwx FILE
                2、赋权加减法
                    chmod u-rwx,g-rwx,o-rwx FILE
                    chmod ugo-x FILE
                    chmod u+rwx,go+r FILE
                    chmod a+r FILE
                3、十进制赋权法
                    chmod 777 FILE
                4、参照赋值法
                    chmod --reference/var/log/file FILE
               注意：1、在使用a+w的情况下，只有属主才会加w,go是不会加上W权限
                     2、目录有写权限操作，但对目录下的文件同有写权限时，用户是不能写文件、但有删除文件的能力

         
        chown 用户属主、属组修改（ownership）
             chown [OPTION]... [OWNER][:[GROUP]] FILE...
             chown [OPTION]... --reference=RFILE FILE... 
               -R :  --recursive 递归修改
               --reference : 参照某文件来修改
               chown mariadb FILE : 只修改文件的属主为mariadb
               chown mariadb:mariadb FILE :修改文件的属主、属组为mariadb
               chown mariadb:mariadb FILE : 同上
               chown --reference=/var/log/file FILE : 参照/var/log/file来修改FILE的属主、属组
14  组管理

        groupadd [options] group
        
                -g : 指定GID号
                -r : 指定为一个系统组

        groupmod [options] GROUP
                -g : 修改GID号码
                -n : 修改组名称 （groupmod -n NEW_GROUP OLD_GROUP）
        
        groupdel 
            groupdel GROUP_NAME
        
        gpasswd [option] group
                    `gpasswd` - administer /etc/group and /etc/gshadow
                -a USER_NAME GROUP_NAME: 向组内添加用户
                -d USER_NAME GROUP_NAME: 把用户从组内删除
                -r USER_NAMEG : 删除组的密码

        
        newgrp [-] [group] : 临时切换到其他组，好能够获取相应权限
                            模拟用户登陆， 以实现重新初始化环境变量

        chgrp               -change group ownership
            chgrp [OPTION]... GROUP FILE...
            chgrp [OPTION]... --reference=RFILE FILE...
                  注：由于chgrp只能修改属组，故一般情况都使用chown代替

15  文件权限
        Linux权限标识：
                r: Readable 读
                W: writable 写
                x: executable 执行
        rwx标识对文件及目录的意义：
            对文件：
                r : 可以读取文件中的内容
                w : 可以修改及删除文件中的内容
                x : 可以将其发起为一个进程
            对目录：
                r : 可以查看目录中的文件，可以使用ls命令， 但不能使用 -l选项
                w : 可以创建、删除目录，但不能修改文件中的内容
                x : 可以使用cd命令进入目录

        文件及目录权限详细表示方面
            文件：-rwxrwxrwx
                从左边第二位开始，每三位代表一个权限类别：
                    u : owner
                    g : owner group
                    o : other
                    a : 代表以上三项
           目录：drwxrwxrwx
                u、g、o同文件权限位

        Linux内核对文件权限的表示方法：
               rwx: 4 2 1 

    umask
     
        Umask Mode Control
            Linux对初始权限的控制来自于Umask的设定，其工作原理如下：
               对新建立的文件：
                   666 - Umask值（由于Linux对文件的执行权限控制很严格，默认取消了文件的执行权限，所以这里是666）
               对新建立的目录：
                   777 - Umask值 
                
            Umask对管理员ROOT的初始值：022
            Umask对普通用户的初始值为：002
                普通用户建立的文件及目录权限如下：
                文件：
                    666-002=664 （如果减得的结果为奇数，就自动加1）对应的权限如下：
                        -rw-rw-r--
                目录：
                    777-002=775 ，对应的权限如下：
                        drwxrwxr-x
            对管理员root建立的文件及目录权限如下：
                文件：
                    666-022=644，对应的权限如下：
                        -rw-r--r--
                目录：
                    777-022=755，对应的权限如下：
                        drwx-r-xr-x
            注：Umask的值可以使用umask命令来设置，但只对当前进程(即shell)有效，如要长期有效，需将此值设置到/etc/profile文件中，或者家目录下的.开头的文件中

    
16  特殊权限

        SUID权限的表示方法
                    1. -rws------ : 如果原本的U上有x权限，设置SUID后，x位变成小写的s
                    2. -rwS------ : 如果原本的U上没有x权限，设置SUID后，x位变成大写的s
                SUID的设置文件
                    1. chmod u+s FILE
                    2. chmod 4000 FILE

        SGID权限的表示方法
                    1. ----rws---:如果原本G上有x权限，设置SGID后，x位变成小写的s.
                    2. ----rwS---:如果原本G上有x权限，设置SGID后，x位变成大写的S.
                SGID的设置文件
                    1. chmod g+s FILE
                    2. chmod 2000 FILE

        Sticky的表示方法
                    1. -------rwt:如果原本o上有x权限，设置Sticky后，x位变成小写的t.
        
        facl的设置
            facl - filesystem access control list
            facl [options] [u|g]:[USER|GROUP][MODE][FILE]
               `-m` : 设置权限
               `-x` : 清除权限
                应用实例
                    1. facl -m u:mariadb:rw ./file : 设置用户为mariadb对当前目录下的file有读写权限；
                    2. facl -m g:mygrp:rw ./file : 设置组为mygrp对当前目录下的file文件有读写权限
                    3. setfacl -x u:user5 dir/ :清除user5对dir目录的权限
                    4. setfacl -b ./file : 清除file文件的所有用户和组的facl权限设置
            
                    2. -------rwT:如果原本o上有x权限，设置Sticky后，x位变成大写的T.
        
        getfacl -facl权限的查看方法
            getfacl FILE : 查看file文件的facl的权限控制
                有facl权限控制机制的文件，展示格式     ----------+ : 在权限位后面多出来一个+号，表示此文件有设置facl权限位
                            
17  cron  计划任务
            /etc/crontab
              # Example of job definition:
                   # .---------------- minute (0 - 59)
                   # |  .------------- hour (0 - 23)
                   # |  |  .---------- day of month (1 - 31)
                   # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
                   # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
                   # |  |  |  |  |
                   # *  *  *  *  * user-name command to be executed
                
                0 0 2,12,22 * * command  列表值，时间值是一个列表，如指定一个月内2、12、22日零时执行任务
                                        上述日指定多个值，2号、12号和22号，以逗号分隔；
                                        连续范围值，时间为连续范围的值，如指定每个月1至7号零时执行任务
                0 0 1-7 * * command 上述日期为连续范围的值1-7时
                                    整除值，根据指定数值是能否被整除确定执行时间，如指定零时开始每3个小时0分执行一次任务
                0 */3 * * * command  上述能被3整除的小时满足执行条件，如3点0分，6点0分等。
                                     混合值，支持以上类型的组合，如指定每小时0至10分，22、33分以及所有能被20整除的分时执行任务，如下
                0-10,22,33,*/20 * * * * command     这里的分钟值采取了多种类型组合指定，包括连续范围值(0-7)，列表值(22,33)，整除值(*/20)。

                
18 调整时区
     timedatectl list-timezones
     timedatectl
     timedatectl set-timezone Asia/Shanghai
     ntpdate  time.nist.gov  -时间同步
     clock - 系统时钟
     hwclock - 硬件时钟
     hwclock -w  -- sys to  hwclock
     hwclock -s  -- hwclock to sys
     

    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
    
19  ss
            所属软件包：iproute
            
                    用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。
                ss [参数]
                ss [参数] [过滤]
                    -h, --help  帮助信息
                    -V, --version   程序版本信息
                    -n, --numeric   不解析服务名称
                    -r, --resolve        解析主机名
                    -a, --all   显示所有套接字（sockets）
                    -l, --listening 显示监听状态的套接字（sockets）
                    -o, --options        显示计时器信息
                    -e, --extended       显示详细的套接字（sockets）信息
                    -m, --memory         显示套接字（socket）的内存使用情况
                    -p, --processes 显示使用套接字（socket）的进程
                    -i, --info  显示 TCP内部信息
                    -s, --summary   显示套接字（socket）使用概况
                    -4, --ipv4           仅显示IPv4的套接字（sockets）
                    -6, --ipv6           仅显示IPv6的套接字（sockets）
                    -0, --packet            显示 PACKET 套接字（socket）
                    -t, --tcp   仅显示 TCP套接字（sockets）
                    -u, --udp   仅显示 UCP套接字（sockets）
                    -d, --dccp  仅显示 DCCP套接字（sockets）
                    -w, --raw   仅显示 RAW套接字（sockets）
                    -x, --unix  仅显示 Unix套接字（sockets）
                    -f, --family=FAMILY  显示 FAMILY类型的套接字（sockets），FAMILY可选，支持  unix, inet, inet6, link, netlink
                    -A, --query=QUERY, --socket=QUERY
                          QUERY := {all|inet|tcp|udp|raw|unix|packet|netlink}[,QUERY]
                    -D, --diag=FILE     将原始TCP套接字（sockets）信息转储到文件
                     -F, --filter=FILE   从文件中都去过滤器信息
                        FILTER := [ state TCP-STATE ] [ EXPRESSION ]
            ss -t -a  --显示TCP连接
            ss -pl  --查看进程使用的socket
            ss -lp | grep 3306 
            ss -o state established '( dport = :smtp or sport = :smtp )'  
            匹配远程地址和端口号
                命令：
                ss dst ADDRESS_PATTERN
                ss dst 192.168.1.5
                ss dst 192.168.119.113:http 
                ss dst 192.168.119.113:smtp 
                ss dst 192.168.119.113:443
            匹配本地地址和端口号
                命令：
                ss src ADDRESS_PATTERN
                ss src 192.168.119.103
                ss src 192.168.119.103:http
                ss src 192.168.119.103:80
                ss src 192.168.119.103:smtp
                ss src 192.168.119.103:25
            将本地或者远程端口和一个数比较
                命令：
                ss dport OP PORT 
                ss sport OP PORT
                输出：
                复制代码
                [root@localhost ~]# ss  sport = :http 
                [root@localhost ~]# ss  dport = :http 
                [root@localhost ~]# ss  dport \> :1024 
                [root@localhost ~]# ss  sport \> :1024 
                [root@localhost ~]# ss sport \< :32000 
                [root@localhost ~]# ss  sport eq :22 
                [root@localhost ~]# ss  dport != :22 
                [root@localhost ~]# ss  state connected sport = :http 
                [root@localhost ~]# ss \( sport = :http or sport = :https \) 
                [root@localhost ~]# ss -o state fin-wait-1 \( sport = :http or sport = :https \) dst 192.168.1/24
                复制代码
                说明：
                ss dport OP PORT 远程端口和一个数比较；ss sport OP PORT 本地端口和一个数比较。
                OP 可以代表以下任意一个: 
                <= or le : 小于或等于端口号
                >= or ge : 大于或等于端口号
                == or eq : 等于端口号
                != or ne : 不等于端口号
                < or gt : 小于端口号
                > or lt : 大于端口号 
    
20.	ssh免密码登录
        1.  ssh-keygen -t  rsa -P    （-P 空密码） 生成密钥对
        2.  ssh-copy-id -i ~/.ssh/id_rsa.pub  192.168.1.41   复制公钥到远程主机


22  SSH  加密
        ssh-keygen  -t   rsa   -生成密钥对 （类型为RSA) 将会生成密钥文件和私钥文件 id_rsa,id_rsa.pub或id_dsa,id_dsa.pub
                                这个程序产生一个密钥对，并要求指定一个文件存放私钥，同时将公钥存放在附加了".pub"后缀的同名文件中。
                                程序同时要求输入一个密语字符串(passphrase)，空表示没有密语(主机密钥的密语必须为空)。
                                密语和口令(password)非常相似，但是密语可以是一句话，里面有单词、标点符号、数字、空格或任何你想要的字符。
                                
                touch ~/.ssh/authorized_keys  -建授权文件
                chmod 600 ~/.ssh/authorized_keys     -设置权限
                cat id_dsa.pub >> ~/.ssh/authorized_keys  -将公钥文件附件到授权key 文件中
                
                这个 公钥对于的私钥文件即可作为登陆服务器的凭据， 可以通过密钥登陆服务器。  
                
    2.  /etc/ssh/sshd_config  文件中：
                RSAAuthentication yes   -ras认证
                PubkeyAuthentication yes   -公钥认证
                PermitRootLogin yes    - 运行root登陆
                PasswordAuthentication yes --运行口令认证
                 
    3.ssh-copy-id -i ~/.ssh/server_rsa.pub user@server   -- 自动把密钥追加到远程主机的 .ssh/authorized_key 上
    4. 免密码登陆
        1、 生成密钥对儿
            #ssh-keygen -t rsa
            运行结束以后，在 $HOME/.ssh/ 目录下，会新生成两个文件：id_rsa.pub
            和 id_rsa。前者是你的公钥，后者是你的私钥。再一次强调用户自己的目录（~/.ssh）必须不能有其他人可写的权限， .ssh
            目录的权限必须是 700, chmod 700 ~/.ssh 必须。否则ssh服务器会拒绝登录。


        2、 复制密钥至远程主机， 注意是公钥。
            将密钥保存至服务端用户目录的.ssh/authorized_keys文件中。

            ssh-copy-id [-i pubkey_file] Username@HOST
            -i 指定公钥所在路径，默认是.ssh/id_rsa.pub文件。

    5.ssh 只允许密钥登陆， 不允许root登陆
            vi　/etc/ssh/sshd_config
            PermitRootLogin no
            PubkeyAuthentication yes
            PasswordAuthentication no
        
23  systemctl

        systemctl list-unit-files |grep  enabled -查看enable的服务
        systemctl  enable   serivcexxx      --enable 服务
              /etc/systemd/system/multi-user.target.wants  -对应目录下建立软连接
                    启用服务就是在当前“runlevel”的配置文件目录/etc/systemd/system/multi-user.target.wants/里，
                    建立/usr/lib/systemd/system里面对应服务配置文件的软链接；禁用服务就是删除此软链接，添加服务就是添加软连接。
        systemctl  is-enabled xxservice   --查看末服务是否为开机启动模式。
        systemct  start /stop  /status       xxx  -- 启动停止查看 服务
        
        systemctl  daemon-reload

24   设备
    1. 系统增加硬盘--------设备识别------------------
        新增硬盘， 不重启服务器， 识别设备操作如下：
        cd /sys/class/scsi_host
        ll
        host0  host1  host2
        
        即可在 /dev/中查到新硬件
25  LVM 磁盘管理
    partprobe /dev/sda  -重读分区表

    df -TH  查看硬盘空间
        xfs 文件系统 扩容命令： xfs_growfs  
        resize2fs  /dev/centos/root  -文件系统扩容

        parted   -查看文件分区 可看文件系统格式
        lsblk  -f  查看文件系统格式
        ll  /dev/sd*
    
    扩容：
        1. pvcreate /dev/sdb  新建物理卷
            vgextend vgname   /dev/sdb  扩展组
            lvextend -L +3000m /dev/centos/root  扩展逻辑卷
            resize2fs  /dev/centos/root    ext 文件系统扩容
            xfs_growfs  /dev/centos/root   xfs 文件系统扩容
               扩容逻辑卷，扩容前需要先unmount后，扩容不影响扩容前磁盘里面的内容
            lvresize -L 300M /dev/vg1/lv1 #重新设定大小
            e2fsck -f /dev/vg1/lv1 #检查磁盘错误 （针对ext4执行）
            resize2fs /dev/vg1/lv1 #更新逻辑卷信息（针对ext4执行）
           xfs扩容，xfs可以不卸载unmount
            kfs.xfs -f /dev/vg1/lv1 #重新格式化成xfs
            mount  /dev/vg1/lv1 /mnt
            lvs #查看大小
            lvresize -L 400M /dev/vg1/lv1 #重新设定大小
            xfs_growfs  /dev/vg1/lv1 #xfs文件系统需要执行，需要先挂载
            df -h #扩容成功
        2. 命令
            pvdisplay
            pvcreate
            pvs
            pvscan
            lvcreate
            lvdisplay
            lvs
            lvscan
	1、 物理卷命令
		一般维护命令：
		pvscan #在系统的所有磁盘中搜索已存在的物理卷
		pvdisplay 物理卷全路径名称 #用于显示指定物理卷的属性。
		pvdata 物理卷全路径名称 #用于显示物理卷的卷组描述区域信息，用于调试目的。
		pvchange Cx|--allocation {y|n} 物理卷全路径名 #用于改变物理卷的分配许可设置物理卷的创建与删除命令
		pvcreate 设备全路径名 #用于在磁盘或磁盘分区上创建物理卷初始化信息，以便对该物理卷进行逻辑卷管理。
		pvmove 源物理卷全路径我[目的物理卷全路径名] #用于把某物理卷中的数据转移到同卷组中其他的特刊卷中。

	2、 卷组命令
		一般维护命令
		vgscan #检测系统中所有磁盘
		vgck [卷组名] #用于检查卷组中卷组描述区域信息的一致性。
		vgdisplay [卷组名] #显示卷组的属性信息
		vgrename 原卷组名 新卷组名
		vgchange -a y|n [卷组名] #改变卷组的相应属性。是否可分配
		vgchange -l 最大逻辑卷数 #卷组可容纳最大逻辑卷数
		vgchange -x y|n [卷组名] #卷是否有效
		vgmknodes [卷组名|卷组路径] #用于建立（重新建立）已有卷组目录和其中的设备文件卷组配置的备份与恢复命令
		vgcfgbackup [卷组名] #把卷组中的VGDA信息备份到“/etc/lvmconf”目录中的文件
		vgcfgrestore -n 卷组名 物理卷全路命名 #从备份文件中必得指定物理卷的信息卷组的建立与删除命令
		vgcreate 卷组名 物理卷全路径名[物理卷全路径名]
		vgmove 卷组名

		卷组的扩充与缩小命令
		vgextend 卷组名 物理卷全路径名[物理卷全路径名]
		vgreduce 卷组名 物理卷全路径名[物理卷全路径名]

		卷组的合并与拆分
		vgmerge 目的卷组名 源卷组名 #合并两个已经存在的卷组，要求两个卷组的物理区域大小相等且源卷组是非活动的。
		vgsplit 现有卷组 新卷组 物理卷全路径名[物理卷全路径名]

		卷组的输入与输出命令
		vgexport 卷组名
		vgimport 卷组名 卷组中的物理卷[卷组中的物理卷]

	3、 逻辑卷命令
		一般命令
		lvscan
		lvdisplay 逻辑卷全路径名[逻辑卷全路径名]
		lvrename 旧逻辑卷全路径名 新逻辑卷全路径名
		lvrename 卷组名 旧逻辑卷名 新逻辑卷名
		lvchange
		e2fsadm -L +|- 逻辑卷增减量 逻辑卷全路径名

		逻辑卷的创建与删除命令
		lvcreate
		lvremove

		逻辑卷的扩充与缩小命令
		lvextend -L|--size +逻辑卷大小增量 逻辑卷全路径名
		lvreduce q -L|--size +逻辑卷减小量 逻辑卷全路径名

	4、 逻辑卷管理命令
		lvmdiskscan #检测所有的SCSI、IDE等存储设备
		lvmchange -R|--reset #复位逻辑卷管理器
		lvmsadc [日志文件全路径名] #收信逻辑卷管理器读写统计信息，保存到日志文件中。
        lvmsar 日志文件全路径名 #从lvmsadc命令生成的日志文件中读取并报告逻辑卷管理器的读写统计信息。

26.  quota  -文件配额工具---------------------------------------------------------------
        quota命令用于显示用户或者工作组的磁盘配额信息。输出信息包括磁盘使用和配额限制。
            语法
            quota(选项)(参数)
            选项
            -g：列出群组的磁盘空间限制；
            -q：简明列表，只列出超过限制的部分；
            -u：列出用户的磁盘空间限制；
            -v：显示该用户或群组，在所有挂入系统的存储设备的空间限制；
            -V：显示版本信息。  
            
27. ulimit
        linux中limit参数设定一般可以通过ulimit命令或编辑/etc/security/limits.conf重新加载的方式使之生效， 通过ulimit比较直接,但只在当前的session有效,limits.conf中可以根据用户和限制项使用户在下次登录中生效.
        ulimit命令
        设置当前shell以及由它启动的进程的资源限制。
        ulimit -a 显示当前的各种用户进程限制。

        [root@localhost security]#ulimit -a

            core file size          (blocks, -c) 0
            data seg size           (kbytes, -d) unlimited
            scheduling priority             (-e) 0
            file size               (blocks, -f) unlimited
            pending signals                 (-i) 30518
            max locked memory       (kbytes, -l) 64
            max memory size         (kbytes, -m) unlimited
            open files                      (-n) 1024
            pipe size            (512 bytes, -p) 8
            POSIX message queues     (bytes, -q) 819200
            real-time priority              (-r) 0
            stack size              (kbytes, -s) 10240
            cpu time               (seconds, -t) unlimited
            max user processes              (-u) 1024
            virtual memory          (kbytes, -v) unlimited
            file locks                      (-x) unlimited

        其他命令参数：
        -a 　显示目前资源限制的设定。   
            -c <core文件上限> 　设定core文件的最大值，单位为区块。     
            -d <数据节区大小> 　程序数据节区的最大值，单位为KB。    
            -f <文件大小> 　shell所能建立的最大文件，单位为KB。    
            -H 　设定资源的硬性限制，也就是管理员所设下的限制。     
            -m <内存大小> 　指定可使用内存的上限，单位为KB。     
            -n <文件数目> 　指定同一时间最多可打开的文件数。    
            -p <缓冲区大小> 　指定管道缓冲区的大小，单位512字节。    
            -s <堆栈大小> 　指定堆叠的上限，单位为KB。      
            -S 　设定资源的弹性限制。      
            -t <CPU时间> 　指定CPU使用时间的上限，单位为秒。    
            -u <进程数目> 　用户最多可启动的进程数目。   

            -v <虚拟内存大小> 　指定可使用的虚拟内存上限，单位为KB。

            limits.conf 文件实际是 Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 pam_limits.so 的配置文件，而且只针对于单个会话。
            　　limits.conf的格式如下：
            username|@groupname type resource limit
            username|@groupname：设置需要被限制的用户名，组名前面加@和用户名区别。也可以用通配符*来做所有用户的限制。
            　　type：有 soft，hard 和 -，soft 指的是当前系统生效的设置值。hard 表明系统中所能设定的最大值。soft 的限制不能比har 限制高。用 - 就表明同时设置了 soft 和 hard 的值。
            　　resource：
            　　core - 限制内核文件的大小
            　　date - 最大数据大小
            　　fsize - 最大文件大小
            　　memlock - 最大锁定内存地址空间
            　　nofile - 打开文件的最大数目
            　　rss - 最大持久设置大小
            　　stack - 最大栈大小
            　　cpu - 以分钟为单位的最多 CPU 时间
            　　noproc - 进程的最大数目
            　　as - 地址空间限制
            　　maxlogins - 此用户允许登录的最大数目
            　　要使 limits.conf 文件配置生效，必须要确保 pam_limits.so 文件被加入到启动文件中。查看 /etc/pam.d/login 文件中有：
            　　session required /lib/security/pam_limits.so
            
            例如：修改文件描述符大小(65536)
            vi  /etc/security/limits.conf
            
            *                               soft    nofile  65536
            *                               hard    nofile  65536

28.tcpdum
        tcpdump命令是一款sniffer工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用-w选项将数据包保存到文件中，方便以后分析。
    语法
    tcpdump(选项)
    选项
        -a：尝试将网络和广播地址转换成名称；
        -c<数据包数目>：收到指定的数据包数目后，就停止进行倾倒操作；
        -d：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；
        -dd：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；
        -ddd：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；
        -e：在每列倾倒资料上显示连接层级的文件头；
        -f：用数字显示网际网络地址；
        -F<表达文件>：指定内含表达方式的文件；
        -i<网络界面>：使用指定的网络截面送出数据包；
        -l：使用标准输出列的缓冲区；
        -n：不把主机的网络地址转换成名字；
        -N：不列出域名；
        -O：不将数据包编码最佳化；
        -p：不让网络界面进入混杂模式；
        -q ：快速输出，仅列出少数的传输协议信息；
        -r<数据包文件>：从指定的文件读取数据包数据；
        -s<数据包大小>：设置每个数据包的大小；
        -S：用绝对而非相对数值列出TCP关联数；
        -t：在每列倾倒资料上不显示时间戳记；
        -tt： 在每列倾倒资料上显示未经格式化的时间戳记；
        -T<数据包类型>：强制将表达方式所指定的数据包转译成设置的数据包类型；
        -v：详细显示指令执行过程；
        -vv：更详细显示指令执行过程；
        -x：用十六进制字码列出数据包资料；
        -w<数据包文件>：把数据包数据写入指定的文件。
29. rsync   文件同步复制
	rsync [OPTION]... SRC DEST
	rsync [OPTION]... SRC [USER@]host:DEST
	rsync [OPTION]... [USER@]HOST:SRC DEST
	rsync [OPTION]... [USER@]HOST::SRC DEST
	rsync [OPTION]... SRC [USER@]HOST::DEST
	rsync [OPTION]... rsync://[USER@]HOST[:PORT]/SRC [DEST]
		-v, --verbose 详细模式输出。
		-q, --quiet 精简输出模式。
		-c, --checksum 打开校验开关，强制对文件传输进行校验。
		-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。
		-r, --recursive 对子目录以递归模式处理。
		-R, --relative 使用相对路径信息。
		-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。
		--backup-dir 将备份文件(如~filename)存放在在目录下。
		-suffix=SUFFIX 定义备份文件前缀。
		-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。
		-l, --links 保留软链结。
		-L, --copy-links 想对待常规文件一样处理软链结。
		--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结。
		--safe-links 忽略指向SRC路径目录树以外的链结。
		-H, --hard-links 保留硬链结。
		-p, --perms 保持文件权限。
		-o, --owner 保持文件属主信息。
		-g, --group 保持文件属组信息。
		-D, --devices 保持设备文件信息。
		-t, --times 保持文件时间信息。
		-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间。
		-n, --dry-run现实哪些文件将被传输。
		-w, --whole-file 拷贝文件，不进行增量检测。
		-x, --one-file-system 不要跨越文件系统边界。
		-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节。
		-e, --rsh=command 指定使用rsh、ssh方式进行数据同步。
		--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息。
		-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。
		--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。
		--delete 删除那些DST中SRC没有的文件。
		--delete-excluded 同样删除接收端那些被该选项指定排除的文件。
		--delete-after 传输结束以后再删除。
		--ignore-errors 及时出现IO错误也进行删除。
		--max-delete=NUM 最多删除NUM个文件。
		--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。
		--force 强制删除目录，即使不为空。
		--numeric-ids 不将数字的用户和组id匹配为用户名和组名。
		--timeout=time ip超时时间，单位为秒。
		-I, --ignore-times 不跳过那些有同样的时间和长度的文件。
		--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。
		--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0。
		-T --temp-dir=DIR 在DIR中创建临时文件。
		--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份。
		-P 等同于 --partial。
		--progress 显示备份过程。
		-z, --compress 对备份的文件在传输时进行压缩处理。
		--exclude=PATTERN 指定排除不需要传输的文件模式。
		--include=PATTERN 指定不排除而需要传输的文件模式。
		--exclude-from=FILE 排除FILE中指定模式的文件。
		--include-from=FILE 不排除FILE指定模式匹配的文件。
		--version 打印版本信息。
		--address 绑定到特定的地址。
		--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件。
		--port=PORT 指定其他的rsync服务端口。
		--blocking-io 对远程shell使用阻塞IO。
		-stats 给出某些文件的传输状态。
		--progress 在传输时现实传输过程。
		--log-format=formAT 指定日志文件格式。
		--password-file=FILE 从FILE中得到密码。
		--bwlimit=KBPS 限制I/O带宽，KBytes per second。
		-h, --help 显示帮助信息。

30.中文字体、 时区设置-- 时间同步
        1 查看是否安装中文字体:
           locale -a |grep "zh_CN" -查看安装的中文字体
        2	yum  installgroup "fonts"
        3.  locale
        4.  localectl set-locale LANG=zh_CN.utf8    -设置区域
            vim  /etc/profile
              export  LANG=zh_CN.UTF-8
            source /etc/profile
        5.  timedatectl set-timezone "Asia/Shanghai" -设置时区
            echo "00 */1 * * * root /usr/sbin/ntpdate 1.cn.pool.ntp.org;hwclock -w" >> /etc/    crontab     -#设置时间同步计划任务
        6. 计划任务
            systemctl status crond  -检查状态
            crontab -e
            /var/spool/cron/username     #文件
            crontab -l  #显示任务
            crontab -r  #删除任务
31.  ftp
     ftp
     open  ip
     prompt    # 提示关闭或开启
     mput  *   # upload
     mget  *   # download
     bye       #close
	
32. dnf   包管理
    
	search   #查找
	list  all [installed]  [available]   #显示全部包、  已安装包 可安装的包
	update
	install  
    reinstall	
	remove
	repolist  [all]   #查看可用的源 全部源
	clean all	# 删除缓存
	makecache   #生成缓存
	provides command  # 查看命令对应的包名
	info               # 查看包信息
	check-update      #检查所有可更新包
	upgrade           #升级包
	autoremove        #删除无用的依赖吧
	grouplist
	groupinstall
	groupremove
	groupupdate 
	dnf –enablerepo=epel install phpmyadmin    #指定源安装包
	dnf distro-sync   #更新到稳定版本
	
33. chrony
   yum install chrony -y
   	/etc/chrony.conf 
	    server  npt.aliyun.com  iburst    #iburst 是参数 发送个八个数据包可加快初始同步速度
	systemctl enable chronyd 
    systemctl start chronyd 
    chronyc sources #查看连接
    hwclock -w
34.  忘记root密码处理：
     grub -e
     编辑启动项， 将ro  更改 rw  init=/sysroot/bin/bash    #启动bash 并设置rw
       [或者 在 linux 行中更改ro 为 rw  rd.break     #中断启动 ]
     ctrl-X  启动此项
      [ #mount                       #查看 sysroot 是否 是rw ，否则需要重新挂账sysroot
        #mount -o remount,rw  /sysroot     #重新挂载sysroot并设置rw  ]
     #chroot  /sysroot/          #切换到伪根
     #Lang=en                    #设置语言
     #passwd                     # 重新设置root密码
     #touch /.autorelabel        # 重新加载selinux的
     #exit
     #reboot          

35. #升级内核
    rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
  
    yum install https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm
    rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-5.el7.elrepo.noarch.rpm
    yum --enablerepo=elrepo-kernel  list  --showduplicates  |grep kernel*
    yum --disablerepo="*" --enablerepo="elrepo-kernel" list available
    yum --enablerepo=elrepo-kernel  list   |grep kernel*
    yum --enablerepo=elrepo-kernel install -y kernel-ml kernel-ml-devel # mail 主线最新版本
    yum --enablerepo=elrepo-kernel install -y kernel-lt kernel-lt-devel  #长期支持版本

    yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm
    yum --enablerepo=elrepo-kernel install kernel-ml

    grubby  --info=ALL  # 查看grub启动信息
    grubby  --default-index #查看默认启动
    grubby --set-default-index 0  #设置默认启动	

   #aliyun 安装
   # wget https://mirrors.aliyun.com/elrepo/elrepo/el8/x86_64/RPMS/elrepo-release-8.2-1.el8.elrepo.noarch.rpm
   # rpm  -ivh  elrepo-release-8.2-1.el8.elrepo.noarch.rpm
   # sed -e 's|^baseurl=http://elrepo.org/linux|baseurl=https://mirrors.aliyun.com/elrepo|g' -i /etc/yum.repos.d/elrepo.repo
   # yum --enablerepo=elrepo-kernel install kernel-ml

36.  rockylinux 8  #设置yum 源
    sed -e 's|^mirrorlist=|#mirrorlist=|g' \
        -e 's|^#baseurl=http://dl.rockylinux.org/$contentdir|baseurl=https://mirrors.aliyun.com/rockylinux|g' \
        -i.bak \
        /etc/yum.repos.d/Rocky-*.repo
     dnf makecache

37. sed   #文本编辑处理命令
        -n  #保留匹配结果
        -e  #多次编辑
        -r  #支持正则表达式
        -i  #修改源文件
      命令
        p  #print    显示
        d  #delete   删除
        a  #add      在位置之后添加
        i  #instert  在位置之前插入
        /pattern/      # 匹配模式
        s/xx/xx/g      or || or  ## or @@    匹配正则后替换 g 代表全局替换
         1~2         #步长
    例子：
        ifconfig ens33 |sed -e "2s/.*inet//" -e "2s/net.*$//p"  -n        #取IP地址

38. awk   #文本格式化
    awk  {print $NF}     file   #   打印 $1   第一列（默认以一个或多个空格分割） $0 - 整行
    awk  '{print $1,$3}' file
    awk   '{print "第一列", $1 , "第二列“, $2}     #自定义 用 ”“  标识
         -F  # 指定分隔符
         -f  # 从脚本文件读取awk命令
         -v  # 定义或修改awk的内部变量   OFS=输出分隔符
         NF   # 是字段数    
         NR   #行数     
         NR==N   # 找到行号==N 
         awk  '{print  NR ,$0}  aa    #每行前加行号 NR(代表行号)
         awk  'NR==5, NR==10 ' aa     显示aa文件第5行到第10行
         awk 'NR==3,NR==5 {print $1}' aa    # 第3行到第5行的第一列
         awk  '{print $1,$(NF-1),$NF} aa   # 倒数第二列和倒数第一列。
         ifconfig ens33 |awk 'NR==2 {print $2}'  #取IP地址
         awk -F ":"  -v OFS="#"  '{print NR,$1,$NF}'  /etc/passwd
            1#root#/bin/bash

39. grep
    egrep  =   grep -E
    grep [option] PATTERN [FILE]
        -i   # 忽略大小写
        -v   #显示不包含指定内容的行
        -o   #仅显示匹配内容本身
        -e   # 使用这则表达式
        -c   # 统计匹配次数
        -n   # 显示行数
        -w   # 按单词搜索
        -r   # 逐层搜索
        -A   #after多少行
        -B   #before多少行
        -C   #上下多少行
        -G   #基本正则
        -E   #扩展正则
        
        --include #指定包含的文件类型
        --exclude #指定排除的文件类型
        --color=auto   # 匹配高亮
        匹配：
            　. ：任意一个字符。
    　　　　　　[abc] ：表示匹配一个字符，这个字符必须是abc中的一个。
    　　　　　　[a-zA-Z] ：表示匹配一个字符，这个字符必须是a-z或A-Z这52个字母中的一个。
    　　　　　　[^123] ：匹配一个字符，这个字符是除了1、2、3以外的所有字符。
    　　　　　　对于一些常用的字符集，系统做了定义：
    　　　　　　[A-Za-z] 等价于 [[:alpha:]]
    　　　　　　[0-9] 等价于 [[:digit:]]     = \d 
    　　　　　　[A-Za-z0-9] 等价于 [[:alnum:]]
    　　　　　　tab,space 等空白字符 [[:space:]]
    　　　　　　[A-Z] 等价于 [[:upper:]]
    　　　　　　[a-z] 等价于 [[:lower:]]
    　　　　　　标点符号 [[:punct:]]
            锚定： ^  行首    ^$ # 空行     ^[[:space]]*$    #空白行
                $  行尾
                \>pattern\>  #匹配整个单词
                ^pattern$    #匹配整行内容
                \<  or \b         #词首
                \>               #词尾
            次数
                *  #  0 ，1 或多次
                \+  # 1次或多次
                \?  # 0次或1次
                {m} #匹配前面字符m次 
                {m,n}  #匹配前面字符最少M次， 最多N次
                ()        #分组
                |         # or
                例子：[root@rocky92 ~]# cat b
                            i like my lover.
                            i love my lover.
                            he likes his lovers.
                            he love his lovers.
                            he lave his lavers.
                        [root@rocky92 ~]# grep -E "(l.v).*\1" b  
                        i love my lover.
                        he love his lovers.
                        he lave his lavers.

40. ctr  命令：          #containerd  cli    命令
    ctr   c      #container     
          ns     #namespace
          i      #image
          run    
          event   # 日志
          t       #task   任务

    ctr  i     #image             # 镜像操作
            check                    check existing images to ensure all content is available locally
            export                   export images
            import                   import images
            list, ls                 list images known to containerd   
            mount                    mount an image to a target path
            unmount                  unmount the image from the target
            pull                     pull an image from a remote
            push                     push an image to a remote
            delete, del, remove, rm  remove one or more images by reference
            tag                      tag an image
            label                    set and clear labels for an image
            convert                  convert an image

    ctr  c    #containers                        #容器操作
            create                   create container
            delete, del, remove, rm  delete one or more existing containers
            info                     get info about a container
            list, ls                 list containers
            label                    set and clear labels for a container
           
    ctr t             #tasks - manage tasks
            attach                   attach to the IO of a running container
            checkpoint               checkpoint a container
            delete, del, remove, rm  delete one or more tasks
            exec                     execute additional processes in an existing container
            list, ls                 list tasks
            kill                     signal a container (default: SIGTERM)
            pause                    pause an existing container
            ps                       list processes for container
            resume                   resume a paused container
            start                    start a container that has been created

     ctr t exec [command options] [flags] CONTAINER CMD [ARG...]   # 执行容器命令
            --cwd value       working directory of the new process
            --tty, -t         allocate a TTY for the container
            --detach, -d      detach from the task after it has started execution
            --exec-id value   exec specific id for the process
            --fifo-dir value  directory used for storing IO FIFOs
            --log-uri value   log uri for custom shim logging
            --user value      user id or name
    ctr   ns    #namespaces                #命名空间
            create, c   create a new namespace
            list, ls    list namespaces
            remove, rm  remove one or more namespaces
            label       set and clear labels for a namespace
  例子：
       ctr  -n k8s.io i ls -q      #查看k8s.io空间的image
       ctr  t   start  -d  nginx   #以守护方式 deamon  运行一个容器
       ctr c create  docker.io/library/nginx:latest nginx   #创建容器
       ctr t exec --exec-id 0  -t nginx sh                  #进入容器并执行shell

41. crictl           #k8s 的工具  client for CRI
        attach              Attach to a running container
        create              Create a new container
        exec                Run a command in a running container
        version             Display runtime version information
        images, image, img  List images
        inspect             Display the status of one or more containers
        inspecti            Return the status of one or more images
        imagefsinfo         Return image filesystem info
        inspectp            Display the status of one or more pods
        logs                Fetch the logs of a container
        port-forward        Forward local port to a pod
        ps                  List containers
        pull                Pull an image from a registry
        run                 Run a new container inside a sandbox
        runp                Run a new pod
        rm                  Remove one or more containers
        rmi                 Remove one or more images
        rmp                 Remove one or more pods
        pods                List pods
        start               Start one or more created containers
        info                Display information of the container runtime
        stop                Stop one or more running containers
        stopp               Stop one or more running pods
        update              Update one or more running containers
        config              Get and set crictl client configuration options
        stats               List container(s) resource usage statistics
        statsp              List pod resource usage statistics
        completion          Output shell completion code
        help, h             Shows a list of commands or help for one command

42.  kubectl
      kubectl  api-resouces    #查看全部资源
      kubectl  cluster-info    #查看集群信息
      kubectl create token  admin-user -n kubernetes-dashbaord #生成并查看用户token
      kubectl  config view  # 查看默认配置文件 $KUBECONFIG 的内容 （系统环境变量）/etc/kubernetes/admin.conf
      kubectl  create  serviceaccount -n namepsace_name   #新建用户账号
      kubectl  create  role  #新建角色
      kubectl  create clusterrole   #新建集群角色
      kubectl  create  rolebinding   #角色绑定
      kubectl  create  clusterrolebinding  dashboard-admin  --clusterrole=cluster-admin  --sericeaccount=kuberents-dashboard:dashboard-admin  #集群角色绑定

43.   linux  性能查看
      yum  install sysstat -y    # 系统状态工具
    free -h   #查看内存使用情况

    dmesg |tail  #查看最后10行的日期

    top [-] [d delay] [q] [c] [S] [s] [i] [n] [b]  #top命令包含了前面好几个命令的检查的内容。比如系统负载情况（uptime）、系统内存使用情况（free）、系统CPU使用情况（vmstat）等。可排序
        -d	指定每两次屏幕信息刷新之间的时间间隔，如希望每秒刷新一次，则使用：top -d 1
        -p	通过指定PID来仅仅监控某个进程的状态
        -S	指定累计模式
        -s	使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险
        -i	使top不显示任何闲置或者僵死的进程
        -c	显示整个命令行而不只是显示命令名
       显示：
        PID  	进程id
        USER	进程所有者的用户名
        PR	   	优先级
        NI		nice值，负值表示高优先级，正值表示低优先级
        VIRT	进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES
        RES		进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA
        SHR		共享内存大小，单位kb
        S		进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程
        %CPU	上次更新到现在的CPU时间占用百分比
        %CPU	上次更新到现在的CPU时间占用百分比
        %MEM	进程使用的物理内存百分比
        TIME+	进程使用的CPU时间总计，单位1/100秒
        COMMAND	命令名/命令行
        按“F" 键查看 缩写的具体解释  可设置显示项d、排序项s
    
    uptime    #cpu  平均负载
        23:51:26 up 21:31,  1 user,  load average: 30.02, 26.43, 19.02
        以运行时间， 用户数 CPU平均负载 1分钟、5分钟、15分钟

    mpstat [-P {|ALL}] [internal [count]]   #多处理器状态查询
        09:59:49 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
        09:59:49 AM  all    0.52    0.04    1.45    0.40    3.28    0.53    0.00    0.00    0.00   93.77
        09:59:49 AM    0    0.53    0.04    1.48    0.37    3.38    0.65    0.00    0.00    0.00   93.55
        09:59:49 AM    1    0.52    0.04    1.43    0.42    3.18    0.42    0.00    0.00    0.00   94.0
           #显示每个CPU的占用情况，如果有一个CPU占用率特别高，那么有可能是一个单线程应用程序引起的
    pidstat    [internal [count]]    #显示每个进程pid的cpu占用情况
        10:01:45 AM   UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command
        10:01:45 AM     0         1    0.01    0.09    0.00    0.01    0.10     0  systemd
        10:01:45 AM     0         2    0.00    0.00    0.00    0.00    0.00     0  kthreadd

    vmstat   [internal [count]]   #虚拟内存状态
        procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
        r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
        2  0      0 631708   3160 776800    0    0   102    20  398  671  1  5 94  0  0
            r：等待在CPU资源的进程数。这个数据比平均负载更加能够体现CPU负载情况，数据中不包含等待IO的进程。如果这个数值大于机器CPU核数，那么机器的CPU资源已经饱和。
            b: 阻塞进程数
            us, sy, id, wa, st：这些都代表了CPU时间的消耗，它们分别表示用户时间（user）、
            系统（内核）时间（sys）、空闲时间（idle）、IO等待时间（wait）和被偷走的时间（stolen，一般被其他虚拟机消耗）。
    
    iostat [-xz]   [internal [count]]    #查看io读写情况
        avg-cpu:  %user   %nice %system %iowait  %steal   %idle
            0.56    0.05    5.49    0.54    0.00   93.35
        Device            r/s     w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz  svctm  %util
        sda              3.26    1.74    224.26     43.48     0.01     0.32   0.28  15.43   14.90    4.26   0.06    68.83    24.97   2.61   1.30
        dm-0             1.96    8.43    270.19     69.49     0.00     0.00   0.00   0.00    5.41    0.87   0.02   138.06     8.24   0.96   1.00
        dm-1             0.01    0.00      0.31      0.00     0.00     0.00   0.00   0.00    0.26    0.00   0.00    21.57     0.00   0.30   0
            rrqm/s：每秒读请求的合并次数
            %util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。
            aqu-sz：平均请求队列长度，请求队列过高则会带来响应时间会更慢
            rrqm/s：每秒读请求的合并次数
            r/s+  w/s  ，就是 IOPS；   (r/s ：每秒的读请求数）
            rkB/s+wkB/s ，就是吞吐量； （rkB/s：每秒读取的数据量(单位kB)）
            r_await+w_await ，就是响应时间
        ls -l /dev/mapper  #查看设备来源
            crw------- 1 root root 10, 236 Jul 12 11:29 control
            lrwxrwxrwx 1 root root       7 Jul 12 11:29 rl-root -> ../dm-0  #lvdisplay   #逻辑卷对应dm-0
            lrwxrwxrwx 1 root root       7 Jul 12 11:29 rl-swap -> ../dm-1

    sar -n  DEV     [internal [count]]  #查看网络设备
        10:06:49 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil
        10:06:50 AM        lo     16.00     16.00      1.25      1.25      0.00      0.00      0.00      0.00
        10:06:50 AM     ens33      1.00      4.00      0.06      0.33      0.00      0.00      0.00      0.00
        10:06:50 AM     tunl0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
           #网络设备的吞吐量，判断网络设备是否已经饱和。如示例输出中，eth0网卡设备，吞吐率大概在22 Mbytes/s，既176 Mbits/sec，没有达到1Gbit/sec的硬件上限。
    
    sar -n TCP ETCP  [internal [count]]  #查看TCP 连接情况
        10:08:59 AM  active/s passive/s    iseg/s    oseg/s
        10:09:00 AM     10.00      1.00      9.00     17.00
        10:08:59 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s
        10:09:00 AM      1.00      1.00      0.00      0.00      2.00
            #是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。ETCP -TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包。













                                                                



