
---------------------------------pip ------------------------------
pip  sources:
https://pypi.tuna.tsinghua.edu.cn/simple/ # 清华大学
https://mirrors.aliyun.com/pypi/simple/ # 阿里云
# 豆瓣
https://pypi.mirrors.ustc.edu.cn/simple/ # 中国科学技术大学
https://pypi.hustunique.com/ # 华中科技大学
https://mirrors.163.com/pypi/simple/      #网易
pip install -i https://pypi.douban.com/simple module # 使用豆瓣源
windows  更换source；
1.打开appdata文件夹，在资源管理器的地址栏输入%appdata%后回车
2. 新建一个pip文件夹，在pip文件夹里面新建一个配置文件pip.ini：
[global]
timeout = 6000
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
trusted-host = pypi.tuna.tsinghua.edu.cn

virtualenv  -p c:\python\python38\python.exe   wk38
virtualenv  wk38
pip install -i http://pypi.douban.com/simple/ numpy   安装指定镜像源
编辑： vi ~/.pip/pip.conf
[global] 
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
[install]
trusted-host = https://pypi.tuna.tsinghua.edu.cn  # 


~/.pip/pip.conf
	[global]
	index-url = https://mirrors.aliyun.com/pypi/simple/

	[install]
	trusted-host=mirrors.aliyun.com

pip  install -i  https://mirrors.aliyun.com/pypi/simple/   pika


pip  install virtualenv
virtualenv --no-site-packages venv  # 创建虚拟环境在venv 目录中， 区需要第三方软件（纯净python环境）

virtualenv  -p  d:\python39\python.exe  py39   #创建虚拟python39
virtualenv  -p  d:\python27\python.exe  py27   #创建虚拟python27

------------------------------------------rabbit ------------------------------------
rabbitmq  3.8.14
curl -fsSL https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc | sudo apt-key add -
or
wget   https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc
apt-key add    rabbitmq-release-signing-key.asc

sudo apt-get install apt-transport-https
sudo tee /etc/apt/sources.list.d/bintray.rabbitmq.list <<EOF
## Installs the latest Erlang 23.x release.
## Change component to "erlang-22.x" to install the latest 22.x version.
## "bionic" as distribution name should work for any later Ubuntu or Debian release.
## See the release to distribution mapping table in RabbitMQ doc guides to learn more.
deb https://dl.bintray.com/rabbitmq-erlang/debian bionic erlang
## Installs latest RabbitMQ release
deb https://dl.bintray.com/rabbitmq/debian bionic main
EOF
sudo apt-get update -y
## Install rabbitmq-server and its dependencies
sudo apt-get install rabbitmq-server -y --fix-missing

rabbitmq-plugins   enable  rabbitmq-managent
rabbitmqctl  add_user wl passwd
rabbitmqctl  set_user_tags  wl administrator
http://192.168.1.96:15672  wl  pass
对wl用户设置/  权限

************************* rabbitmq- cluster ****************************************
cluster
 /etc/hosts
 
 systemctl stop rabbitmq-server
  scp /var/lib/rabbitmq/.erlang.cookie  root@ubuntu08:/var/lib/rabbitmq/
  scp /var/lib/rabbitmq/.erlang.cookie  root@ubuntu06:/var/lib/rabbitmq/
  systemctl start rabbitmq-server
  rabbitmqctl  stop_app
  rabbitmqctl   join_cluster rabbit@ubuntu06
  rabbitmqctl  start_app
  
rabbitmqctl  cluster_status
rabbitmqctl  forgot_cluster_node   rabbit@ubuntu08      # remove node  ubuntu08  

Rabbitmq服务器的主要通过rabbitmqctl和rabbimq-plugins两个工具来管理，以下是一些常用功能。

1）. 服务器启动与关闭
      启动: rabbitmq-server –detached
      关闭:rabbitmqctl stop
      若单机有多个实例，则在rabbitmqctlh后加–n 指定名称

2）. 插件管理
      开启某个插件：rabbitmq-pluginsenable xxx
      关闭某个插件：rabbitmq-pluginsdisablexxx
      注意：重启服务器后生效。
3）.virtual_host管理
      新建virtual_host: rabbitmqctladd_vhost  xxx
      撤销virtual_host:rabbitmqctl  delete_vhost xxx
4）. 用户管理
      新建用户：rabbitmqctl add_user xxx pwd
      删除用户:   rabbitmqctl delete_user xxx
      改密码: rabbimqctl change_password {username} {newpassword}
      设置用户角色：rabbitmqctl set_user_tags {username} {tag ...}
              Tag可以为 administrator,monitoring, management
5）. 权限管理
      权限设置：set_permissions [-pvhostpath] {user} {conf} {write} {read}
               Vhostpath
               Vhost路径
               user
     用户名
              Conf
      一个正则表达式match哪些配置资源能够被该用户访问。
              Write
      一个正则表达式match哪些配置资源能够被该用户读。
               Read
      一个正则表达式match哪些配置资源能够被该用户访问。
6）. 获取服务器状态信息
       服务器状态：rabbitmqctl status 
 
------------------------------------------------------------------------------ 
# 生产者

import pika
import json

credentials = pika.PlainCredentials('wl', 'pass')  # mq用户名和密码


# 虚拟队列需要指定参数 virtual_host，如果是默认的可以不填。
connection = pika.BlockingConnection(pika.ConnectionParameters('192.168.1.96',5672,'/',credentials ))
channel=connection.channel()
# 声明消息队列，消息将在这个队列传递，如不存在，则创建
result = channel.queue_declare(queue = 'python-test')

for i in range(10):
    message=json.dumps({'OrderId':"9000%s"%i})
# 向队列插入数值 routing_key是队列名
    channel.basic_publish(exchange = '',routing_key = 'python-test',body = message)
    print(message)
connection.close()

#消费者

import pika
credentials = pika.PlainCredentials('wl', 'pass')
connection = pika.BlockingConnection(pika.ConnectionParameters('192.168.1.96',5672,'/',credentials))
channel = connection.channel()
# 申明消息队列，消息在这个队列传递，如果不存在，则创建队列
channel.queue_declare(queue = 'python-test', durable = False)
# 定义一个回调函数来处理消息队列中的消息，这里是打印出来
def callback(ch, method, properties, body):
    ch.basic_ack(delivery_tag = method.delivery_tag)
    print(body.decode())

# 告诉rabbitmq，用callback来接收消息
channel.basic_consume(on_message_callback=callback,
                      queue = 'python-test'
                      )
channel.start_consuming()

************************************** Rabbitmq-server  8.15***********

!/bin/sh

## If sudo is not available on the system,
## uncomment the line below to install it
# apt-get install -y sudo

sudo apt-get update -y
## Install prerequisites
sudo apt-get install curl gnupg -y
## Install RabbitMQ signing key
curl -fsSL https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc | sudo apt-key add -
## Install apt HTTPS transport
sudo apt-get install apt-transport-https

## Add Bintray repositories that provision latest RabbitMQ and Erlang 23.x releases
sudo tee /etc/apt/sources.list.d/bintray.rabbitmq.list <<EOF
## Installs the latest Erlang 23.x release.
## Change component to "erlang-22.x" to install the latest 22.x version.
## "bionic" as distribution name should work for any later Ubuntu or Debian release.
## See the release to distribution mapping table in RabbitMQ doc guides to learn more.
deb https://dl.bintray.com/rabbitmq-erlang/debian groovy erlang
## Installs latest RabbitMQ release
deb https://dl.bintray.com/rabbitmq/debian groovy main
EOF

## Update package indices
sudo apt-get update -y
## Install rabbitmq-server and its dependencies
sudo apt-get install rabbitmq-server -y --fix-missing
curl -fsSL https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc | sudo apt-key add -
wget https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc 
apt-key add   rabbitmq-release-signing-key.asc
apt-get install apt-transport-https
cat  >> /etc/apt/sources.list.d/rabbitmq.list <<EOF
deb https://dl.bintray.com/rabbitmq-erlang/debian bionic erlang
deb https://dl.bintray.com/rabbitmq/debian bionic main
EOF
sudo apt-get update -y
sudo apt-get install rabbitmq-server -y --fix-missing
rabbitmq-plugins  enable rabbitmq_management  启动web 管理
cluster:
vim /etc/hosts
192.168.0.107 rabbitmq_node2
192.168.0.105 rabbitmq_node1
保证同样的配置在所有的节点上都是相同的。验证你配置的正确不正确你只需要在你的机器上ping rabbitmq_node1，试下请求的ip是不是你配置的即可。按照DNS的请求原理，hosts是最高优先权，除非浏览器有缓存，你直接用ping就不会有问题的。
选择一个节点stop，然后连接到另外节点。
rabbitmqctl stop_app
rabbitmqctl join_cluster rabbit@rabbitmq_node2
Clustering node rabbit@rabbitmq_node1 with rabbit@rabbitmq_node2 ...
rabbitmqctl start_app
systemctl stop   rabbitmq-server
scp  /var/lib/rabbitmq/.erlang.cookie  
rabbitmqctl add_user wl pass  # create a user
rabbitmqctl set_user_tags wl administrator # tag the user with "administrator" for full management UI and HTTP API access




------------------------------kafka ------------------------------------
tar zxvf  kafka_2.13-2.7.0.tgz

配置
config/server1.properties:
	broker.id=0                         # 集群不能相同
	listeners=PLAINTEXT://192.168.10.130:9092
	log.dirs=kafka-logs                      #log 目录
	zookeeper.connect=192.168.1.86:2181,192.168.1.87:2181,192.168.1.98:2181  #zookeeper  集群
	

启动服务：
//这是前台启动，启动以后，当前就无法进行其他操作（不推荐）
./zookeeper-server-start.sh ../config/zookeeper.properties
//后台启动（推荐）
./zookeeper-server-start.sh ../config/zookeeper.properties 1>/dev/null 2>&1 &
创建主题
./kafka-topics.sh --create --zookeeper localhost:2181 --config max.message.bytes=12800000 --config flush.messages=1 --replication-factor 1 --partitions 1 --topic test

命令解析：
--create： 指定创建topic动作
--topic：指定新建topic的名称
--zookeeper： 指定kafka连接zk的连接url，该值和server.properties文件中的配置项{zookeeper.connect}一样
--config：指定当前topic上有效的参数值，参数列表参考文档为: http://kafka.apache.org/082/documentation.html#brokerconfigs
--partitions：指定当前创建的kafka分区数量，默认为1个
--replication-factor：指定每个分区的复制因子个数，默认1

生产者：
./kafka-console-producer.sh --broker-list localhost:9092 --topic test
消费：
./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning

=========================== systemd   nginx 设置服务方式=====================================
源码编译安装nginx 实现systemd管理控制
安装nginx编译环境

yum  -y install gcc gcc-c++    openssl-devel pcre-devel gd-devel  iproute net-tools telnet wget curl
wget http://nginx.org/download/nginx-1.15.5.tar.gz
tar zxf nginx-1.15.5.tar.gz &&
cd nginx-1.15.5
./configure --prefix=/usr/local/nginx \
    --with-http_ssl_module \
    --with-http_stub_status_module 
make -j 4 && make install
通用方式启动nginx

/usr/local/nginx/sbin/nginx  #启动
/usr/local/nginx/sbin/nginx  -s reload  #重启
/usr/local/nginx/sbin/nginx -s   quit   #关闭nginx

nginx  服务：

vim      /usr/lib/systemd/system/nginx.service
[Unit]
Description=nginx
After=network.target
  
[Service]
Type=forking
ExecStart=/usr/local/nginx/sbin/nginx
ExecReload=/usr/local/nginx/sbin/nginx -s reload
ExecStop=/usr/local/nginx/sbin/nginx -s quit
PrivateTmp=true
  
[Install]
WantedBy=multi-user.target


systemctl restart nginx
systemctl enable  nginx
systemctl stop  nginx

**********************   tomcat     ***********************************

二进制安装tomcat 实现systemd管理控制
安装java环境，我已经将安装包打包到我得服务器上，也可以去官网下载
wget  120.78.77.38/file/jdk-8u231-linux-x64.rpm
wget  120.78.77.38/file/apache-tomcat-9.0.27.tar.gz
rpm -ivh  jdk-8u231-linux-x64.rpm    #rpm直接安装jdk

配置环境变量

vim    /etc/profile
export JAVA_HOME=/usr/java/jdk1.8.0_231-amd64
export JRE_HOME=${JAVA_HOME}/jre  
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  
export JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin
export  PATH=${JAVA_HOME}/bin:$PATH 
source   /etc/profile

java -version   #检测环境

安装tomcat
tar  -xf  apache-tomcat-9.0.27  
mv  apache-tomcat-9.0.27  /usr/local/tomcat
启动tomcat
sh    /usr/local/tomcat/bin/startup.sh   #启动
sh   /usr/local/tomcat/bin/shutdown.sh #关闭
systemd管理控制启动

vim      /usr/lib/systemd/system/tomcat.service
[Unit]
Description=tomcat server
Wants=network-online.target
After=network.target

[Service]
Type=forking
Environment="JAVA_HOME=/usr/java/jdk1.8.0_231-amd64"
Environment="PATH=$JAVA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"
Environment="CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar"
ExecStart=/usr/local/tomcat/bin/startup.sh
ExecStop=/usr/local/tomcat/bin/shutdown.sh
Restart=on-failure

[Install]
WantedBy=multi-user.target
systemctl restart tomcat  #启动
systemctl enable tomcat   #配置自启
systemctl stop  tomcat   #停止服务
systemctl status  tomcat  #检测状态

***************************** 部署  jar  应用 ********************************
部署jar程序 实现systemd管理控制
实际得项目中会有一些jar程序需要启动 如果手动启动则需要输入一大串命令 停止则需要杀掉进程来停止，很麻烦

举一个实际启动得例子切换到jar目录下

java -jar decode.jar -Dconfig=/usr/local/abc/application.properties
编写一个启动脚本

vim  uams.sh
#!/bin/bash
#
source /etc/profile
jarName="abc-web.jar"
workDir="/usr/local/abc"
start(){
    cd ${workDir} && java -jar ${jarName} --spring.profiles.active=prod --server.port=9630 >uams.log 2>&1 &
}
stop(){
    ps -ef | grep -qP "(?<=-jar)\s+${jarName}" && kill $(ps -ef | grep -P "(?<=-jar)\s+${jarName}" | awk '{print $2}')
}
case $1 in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
esac

#编写 systemd配置文件

vim      /usr/lib/systemd/system/abc.service

[Unit]
Description=uams server
Wants=network-online.target
After=network.target

[Service]
Type=forking
WorkingDirectory=/usr/local/abc/
ExecStart=/bin/bash uams.sh start
ExecStop=/bin/bash uams.sh stop
ExecReload=/bin/bash uams.sh restart
Restart=on-failure

[Install]
WantedBy=multi-user.target

启动abc服务
systemctl restart abc  #启动
systemctl enable abc   #配置自启
systemctl stop  abc   #停止服务
systemctl status  abc  #检测状态